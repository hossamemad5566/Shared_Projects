
cross_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000037cc  00003860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080008e  0080008e  0000388e  2**0
                  ALLOC
  3 .stab         0000333c  00000000  00000000  00003890  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001079  00000000  00000000  00006bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aa29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b7d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b938  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bbc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c393  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__vector_1>
       8:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__vector_2>
       c:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 1a 	call	0x349e	; 0x349e <main>
      8a:	0c 94 e4 1b 	jmp	0x37c8	; 0x37c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b9 1b 	jmp	0x3772	; 0x3772 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d9 1b 	jmp	0x37b2	; 0x37b2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <M_ADC_Void_ADCInit>:




void M_ADC_Void_ADCInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
#if   ADC_VREF   ==   AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
#elif ADC_VREF   ==   _2V5
	SET_BIT(ADMUX_REG,REFS0_BIT);
	SET_BIT(ADMUX_REG,REFS1_BIT);
#endif
	/* TO SELECT RIGHT ADJUST */
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
#if   ADC_PRESCALER_DV   ==   128
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG,ADPS0_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
#endif
	/* TO ENABLE AUTO TRIGGER MODE */
	SET_BIT(ADCSRA_REG,ADATE_BIT);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 62       	ori	r24, 0x20	; 32
     bae:	8c 93       	st	X, r24
	/* TO ENABLE ADC CIRCIUT */
	SET_BIT(ADCSRA_REG,ADEN_BIT);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24

}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <M_ADC_U16_ADCRead>:

u16  M_ADC_U16_ADCRead(u8 Copy_U8_AdcChannel)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <M_ADC_U16_ADCRead+0x6>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <M_ADC_U16_ADCRead+0x8>
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_U32_Counter = 0;
     bd4:	19 82       	std	Y+1, r1	; 0x01
     bd6:	1a 82       	std	Y+2, r1	; 0x02
     bd8:	1b 82       	std	Y+3, r1	; 0x03
     bda:	1c 82       	std	Y+4, r1	; 0x04
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
     bdc:	a6 e2       	ldi	r26, 0x26	; 38
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e6 e2       	ldi	r30, 0x26	; 38
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 64       	ori	r24, 0x40	; 64
     be8:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG & 0b11100000;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 7e       	andi	r24, 0xE0	; 224
     bf6:	8c 93       	st	X, r24
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
     bf8:	a7 e2       	ldi	r26, 0x27	; 39
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e7 e2       	ldi	r30, 0x27	; 39
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	90 81       	ld	r25, Z
     c02:	8d 81       	ldd	r24, Y+5	; 0x05
     c04:	89 2b       	or	r24, r25
     c06:	8c 93       	st	X, r24
     c08:	16 c0       	rjmp	.+44     	; 0xc36 <M_ADC_U16_ADCRead+0x72>
	while(Local_U32_Counter < 2000000)
	{
		Local_U32_Counter++;
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	ab 81       	ldd	r26, Y+3	; 0x03
     c10:	bc 81       	ldd	r27, Y+4	; 0x04
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	a1 1d       	adc	r26, r1
     c16:	b1 1d       	adc	r27, r1
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	9a 83       	std	Y+2, r25	; 0x02
     c1c:	ab 83       	std	Y+3, r26	; 0x03
     c1e:	bc 83       	std	Y+4, r27	; 0x04
		if((GET_BIT((ADCSRA_REG),(ADIF_BIT))) == ADC_CONVERSION_COMPLETE)
     c20:	e6 e2       	ldi	r30, 0x26	; 38
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	82 95       	swap	r24
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	88 23       	and	r24, r24
     c34:	61 f4       	brne	.+24     	; 0xc4e <M_ADC_U16_ADCRead+0x8a>
	u32 Local_U32_Counter = 0;
	/* TO START CONVERSION */
	SET_BIT(ADCSRA_REG,ADSC_BIT);
	ADMUX_REG = ADMUX_REG & 0b11100000;
	ADMUX_REG = ADMUX_REG | Copy_U8_AdcChannel;
	while(Local_U32_Counter < 2000000)
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	ab 81       	ldd	r26, Y+3	; 0x03
     c3c:	bc 81       	ldd	r27, Y+4	; 0x04
     c3e:	80 38       	cpi	r24, 0x80	; 128
     c40:	24 e8       	ldi	r18, 0x84	; 132
     c42:	92 07       	cpc	r25, r18
     c44:	2e e1       	ldi	r18, 0x1E	; 30
     c46:	a2 07       	cpc	r26, r18
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	b2 07       	cpc	r27, r18
     c4c:	f0 f2       	brcs	.-68     	; 0xc0a <M_ADC_U16_ADCRead+0x46>
		if((GET_BIT((ADCSRA_REG),(ADIF_BIT))) == ADC_CONVERSION_COMPLETE)
		{
			break;
		}
	}
	return ADCVALUE;
     c4e:	e4 e2       	ldi	r30, 0x24	; 36
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
}
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <H_Buzzer_Void_BuzzerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerInit(void)
{
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
     c6e:	84 e2       	ldi	r24, 0x24	; 36
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
}
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <H_Buzzer_Void_BuzzerOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOn(void)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
     c84:	84 e2       	ldi	r24, 0x24	; 36
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
}
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <H_Buzzer_Void_BuzzerOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOff(void)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
     c9a:	84 e2       	ldi	r24, 0x24	; 36
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
}
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <H_Buzzer_Void_BuzzerTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTog(void)
{
     ca8:	df 93       	push	r29
     caa:	cf 93       	push	r28
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_TogPin(BUZZER_PIN);
     cb0:	84 e2       	ldi	r24, 0x24	; 36
     cb2:	0e 94 17 0b 	call	0x162e	; 0x162e <M_DIO_Void_TogPin>
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <H_Buzzer_Void_BuzzerOnce>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerOnce(void)
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	2e 97       	sbiw	r28, 0x0e	; 14
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
     cd0:	84 e2       	ldi	r24, 0x24	; 36
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a8 ec       	ldi	r26, 0xC8	; 200
     cde:	b2 e4       	ldi	r27, 0x42	; 66
     ce0:	8b 87       	std	Y+11, r24	; 0x0b
     ce2:	9c 87       	std	Y+12, r25	; 0x0c
     ce4:	ad 87       	std	Y+13, r26	; 0x0d
     ce6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cea:	7c 85       	ldd	r23, Y+12	; 0x0c
     cec:	8d 85       	ldd	r24, Y+13	; 0x0d
     cee:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4a e7       	ldi	r20, 0x7A	; 122
     cf6:	55 e4       	ldi	r21, 0x45	; 69
     cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	8f 83       	std	Y+7, r24	; 0x07
     d02:	98 87       	std	Y+8, r25	; 0x08
     d04:	a9 87       	std	Y+9, r26	; 0x09
     d06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d08:	6f 81       	ldd	r22, Y+7	; 0x07
     d0a:	78 85       	ldd	r23, Y+8	; 0x08
     d0c:	89 85       	ldd	r24, Y+9	; 0x09
     d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e8       	ldi	r20, 0x80	; 128
     d16:	5f e3       	ldi	r21, 0x3F	; 63
     d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d1c:	88 23       	and	r24, r24
     d1e:	2c f4       	brge	.+10     	; 0xd2a <H_Buzzer_Void_BuzzerOnce+0x6e>
		__ticks = 1;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9e 83       	std	Y+6, r25	; 0x06
     d26:	8d 83       	std	Y+5, r24	; 0x05
     d28:	3f c0       	rjmp	.+126    	; 0xda8 <H_Buzzer_Void_BuzzerOnce+0xec>
	else if (__tmp > 65535)
     d2a:	6f 81       	ldd	r22, Y+7	; 0x07
     d2c:	78 85       	ldd	r23, Y+8	; 0x08
     d2e:	89 85       	ldd	r24, Y+9	; 0x09
     d30:	9a 85       	ldd	r25, Y+10	; 0x0a
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	3f ef       	ldi	r19, 0xFF	; 255
     d36:	4f e7       	ldi	r20, 0x7F	; 127
     d38:	57 e4       	ldi	r21, 0x47	; 71
     d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3e:	18 16       	cp	r1, r24
     d40:	4c f5       	brge	.+82     	; 0xd94 <H_Buzzer_Void_BuzzerOnce+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d42:	6b 85       	ldd	r22, Y+11	; 0x0b
     d44:	7c 85       	ldd	r23, Y+12	; 0x0c
     d46:	8d 85       	ldd	r24, Y+13	; 0x0d
     d48:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e2       	ldi	r20, 0x20	; 32
     d50:	51 e4       	ldi	r21, 0x41	; 65
     d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	9e 83       	std	Y+6, r25	; 0x06
     d68:	8d 83       	std	Y+5, r24	; 0x05
     d6a:	0f c0       	rjmp	.+30     	; 0xd8a <H_Buzzer_Void_BuzzerOnce+0xce>
     d6c:	80 e9       	ldi	r24, 0x90	; 144
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	9c 83       	std	Y+4, r25	; 0x04
     d72:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <H_Buzzer_Void_BuzzerOnce+0xbc>
     d7c:	9c 83       	std	Y+4, r25	; 0x04
     d7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8a:	8d 81       	ldd	r24, Y+5	; 0x05
     d8c:	9e 81       	ldd	r25, Y+6	; 0x06
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	69 f7       	brne	.-38     	; 0xd6c <H_Buzzer_Void_BuzzerOnce+0xb0>
     d92:	14 c0       	rjmp	.+40     	; 0xdbc <H_Buzzer_Void_BuzzerOnce+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d94:	6f 81       	ldd	r22, Y+7	; 0x07
     d96:	78 85       	ldd	r23, Y+8	; 0x08
     d98:	89 85       	ldd	r24, Y+9	; 0x09
     d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	8d 81       	ldd	r24, Y+5	; 0x05
     daa:	9e 81       	ldd	r25, Y+6	; 0x06
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <H_Buzzer_Void_BuzzerOnce+0xf8>
     db8:	9a 83       	std	Y+2, r25	; 0x02
     dba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
     dbc:	84 e2       	ldi	r24, 0x24	; 36
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
}
     dc4:	2e 96       	adiw	r28, 0x0e	; 14
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <H_Buzzer_Void_BuzzerTwice>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Buzzer_Void_BuzzerTwice(void)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	aa 97       	sbiw	r28, 0x2a	; 42
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
     dea:	84 e2       	ldi	r24, 0x24	; 36
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	a8 ec       	ldi	r26, 0xC8	; 200
     df8:	b2 e4       	ldi	r27, 0x42	; 66
     dfa:	8f a3       	std	Y+39, r24	; 0x27
     dfc:	98 a7       	std	Y+40, r25	; 0x28
     dfe:	a9 a7       	std	Y+41, r26	; 0x29
     e00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e02:	6f a1       	ldd	r22, Y+39	; 0x27
     e04:	78 a5       	ldd	r23, Y+40	; 0x28
     e06:	89 a5       	ldd	r24, Y+41	; 0x29
     e08:	9a a5       	ldd	r25, Y+42	; 0x2a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	4a e7       	ldi	r20, 0x7A	; 122
     e10:	55 e4       	ldi	r21, 0x45	; 69
     e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	8b a3       	std	Y+35, r24	; 0x23
     e1c:	9c a3       	std	Y+36, r25	; 0x24
     e1e:	ad a3       	std	Y+37, r26	; 0x25
     e20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e22:	6b a1       	ldd	r22, Y+35	; 0x23
     e24:	7c a1       	ldd	r23, Y+36	; 0x24
     e26:	8d a1       	ldd	r24, Y+37	; 0x25
     e28:	9e a1       	ldd	r25, Y+38	; 0x26
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e8       	ldi	r20, 0x80	; 128
     e30:	5f e3       	ldi	r21, 0x3F	; 63
     e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e36:	88 23       	and	r24, r24
     e38:	2c f4       	brge	.+10     	; 0xe44 <H_Buzzer_Void_BuzzerTwice+0x6e>
		__ticks = 1;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9a a3       	std	Y+34, r25	; 0x22
     e40:	89 a3       	std	Y+33, r24	; 0x21
     e42:	3f c0       	rjmp	.+126    	; 0xec2 <H_Buzzer_Void_BuzzerTwice+0xec>
	else if (__tmp > 65535)
     e44:	6b a1       	ldd	r22, Y+35	; 0x23
     e46:	7c a1       	ldd	r23, Y+36	; 0x24
     e48:	8d a1       	ldd	r24, Y+37	; 0x25
     e4a:	9e a1       	ldd	r25, Y+38	; 0x26
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	3f ef       	ldi	r19, 0xFF	; 255
     e50:	4f e7       	ldi	r20, 0x7F	; 127
     e52:	57 e4       	ldi	r21, 0x47	; 71
     e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e58:	18 16       	cp	r1, r24
     e5a:	4c f5       	brge	.+82     	; 0xeae <H_Buzzer_Void_BuzzerTwice+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e5c:	6f a1       	ldd	r22, Y+39	; 0x27
     e5e:	78 a5       	ldd	r23, Y+40	; 0x28
     e60:	89 a5       	ldd	r24, Y+41	; 0x29
     e62:	9a a5       	ldd	r25, Y+42	; 0x2a
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e2       	ldi	r20, 0x20	; 32
     e6a:	51 e4       	ldi	r21, 0x41	; 65
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9a a3       	std	Y+34, r25	; 0x22
     e82:	89 a3       	std	Y+33, r24	; 0x21
     e84:	0f c0       	rjmp	.+30     	; 0xea4 <H_Buzzer_Void_BuzzerTwice+0xce>
     e86:	80 e9       	ldi	r24, 0x90	; 144
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	98 a3       	std	Y+32, r25	; 0x20
     e8c:	8f 8f       	std	Y+31, r24	; 0x1f
     e8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e90:	98 a1       	ldd	r25, Y+32	; 0x20
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <H_Buzzer_Void_BuzzerTwice+0xbc>
     e96:	98 a3       	std	Y+32, r25	; 0x20
     e98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9a:	89 a1       	ldd	r24, Y+33	; 0x21
     e9c:	9a a1       	ldd	r25, Y+34	; 0x22
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	9a a3       	std	Y+34, r25	; 0x22
     ea2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea4:	89 a1       	ldd	r24, Y+33	; 0x21
     ea6:	9a a1       	ldd	r25, Y+34	; 0x22
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	69 f7       	brne	.-38     	; 0xe86 <H_Buzzer_Void_BuzzerTwice+0xb0>
     eac:	14 c0       	rjmp	.+40     	; 0xed6 <H_Buzzer_Void_BuzzerTwice+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eae:	6b a1       	ldd	r22, Y+35	; 0x23
     eb0:	7c a1       	ldd	r23, Y+36	; 0x24
     eb2:	8d a1       	ldd	r24, Y+37	; 0x25
     eb4:	9e a1       	ldd	r25, Y+38	; 0x26
     eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	9a a3       	std	Y+34, r25	; 0x22
     ec0:	89 a3       	std	Y+33, r24	; 0x21
     ec2:	89 a1       	ldd	r24, Y+33	; 0x21
     ec4:	9a a1       	ldd	r25, Y+34	; 0x22
     ec6:	9e 8f       	std	Y+30, r25	; 0x1e
     ec8:	8d 8f       	std	Y+29, r24	; 0x1d
     eca:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ecc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <H_Buzzer_Void_BuzzerTwice+0xf8>
     ed2:	9e 8f       	std	Y+30, r25	; 0x1e
     ed4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
     ed6:	84 e2       	ldi	r24, 0x24	; 36
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e7       	ldi	r26, 0x70	; 112
     ee4:	b2 e4       	ldi	r27, 0x42	; 66
     ee6:	89 8f       	std	Y+25, r24	; 0x19
     ee8:	9a 8f       	std	Y+26, r25	; 0x1a
     eea:	ab 8f       	std	Y+27, r26	; 0x1b
     eec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eee:	69 8d       	ldd	r22, Y+25	; 0x19
     ef0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ef4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	4a e7       	ldi	r20, 0x7A	; 122
     efc:	55 e4       	ldi	r21, 0x45	; 69
     efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	8d 8b       	std	Y+21, r24	; 0x15
     f08:	9e 8b       	std	Y+22, r25	; 0x16
     f0a:	af 8b       	std	Y+23, r26	; 0x17
     f0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f0e:	6d 89       	ldd	r22, Y+21	; 0x15
     f10:	7e 89       	ldd	r23, Y+22	; 0x16
     f12:	8f 89       	ldd	r24, Y+23	; 0x17
     f14:	98 8d       	ldd	r25, Y+24	; 0x18
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f22:	88 23       	and	r24, r24
     f24:	2c f4       	brge	.+10     	; 0xf30 <H_Buzzer_Void_BuzzerTwice+0x15a>
		__ticks = 1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	9c 8b       	std	Y+20, r25	; 0x14
     f2c:	8b 8b       	std	Y+19, r24	; 0x13
     f2e:	3f c0       	rjmp	.+126    	; 0xfae <H_Buzzer_Void_BuzzerTwice+0x1d8>
	else if (__tmp > 65535)
     f30:	6d 89       	ldd	r22, Y+21	; 0x15
     f32:	7e 89       	ldd	r23, Y+22	; 0x16
     f34:	8f 89       	ldd	r24, Y+23	; 0x17
     f36:	98 8d       	ldd	r25, Y+24	; 0x18
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	3f ef       	ldi	r19, 0xFF	; 255
     f3c:	4f e7       	ldi	r20, 0x7F	; 127
     f3e:	57 e4       	ldi	r21, 0x47	; 71
     f40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f44:	18 16       	cp	r1, r24
     f46:	4c f5       	brge	.+82     	; 0xf9a <H_Buzzer_Void_BuzzerTwice+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f48:	69 8d       	ldd	r22, Y+25	; 0x19
     f4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e2       	ldi	r20, 0x20	; 32
     f56:	51 e4       	ldi	r21, 0x41	; 65
     f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	9c 8b       	std	Y+20, r25	; 0x14
     f6e:	8b 8b       	std	Y+19, r24	; 0x13
     f70:	0f c0       	rjmp	.+30     	; 0xf90 <H_Buzzer_Void_BuzzerTwice+0x1ba>
     f72:	80 e9       	ldi	r24, 0x90	; 144
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	9a 8b       	std	Y+18, r25	; 0x12
     f78:	89 8b       	std	Y+17, r24	; 0x11
     f7a:	89 89       	ldd	r24, Y+17	; 0x11
     f7c:	9a 89       	ldd	r25, Y+18	; 0x12
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <H_Buzzer_Void_BuzzerTwice+0x1a8>
     f82:	9a 8b       	std	Y+18, r25	; 0x12
     f84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f86:	8b 89       	ldd	r24, Y+19	; 0x13
     f88:	9c 89       	ldd	r25, Y+20	; 0x14
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	9c 8b       	std	Y+20, r25	; 0x14
     f8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f90:	8b 89       	ldd	r24, Y+19	; 0x13
     f92:	9c 89       	ldd	r25, Y+20	; 0x14
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	69 f7       	brne	.-38     	; 0xf72 <H_Buzzer_Void_BuzzerTwice+0x19c>
     f98:	14 c0       	rjmp	.+40     	; 0xfc2 <H_Buzzer_Void_BuzzerTwice+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9a:	6d 89       	ldd	r22, Y+21	; 0x15
     f9c:	7e 89       	ldd	r23, Y+22	; 0x16
     f9e:	8f 89       	ldd	r24, Y+23	; 0x17
     fa0:	98 8d       	ldd	r25, Y+24	; 0x18
     fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	9c 8b       	std	Y+20, r25	; 0x14
     fac:	8b 8b       	std	Y+19, r24	; 0x13
     fae:	8b 89       	ldd	r24, Y+19	; 0x13
     fb0:	9c 89       	ldd	r25, Y+20	; 0x14
     fb2:	98 8b       	std	Y+16, r25	; 0x10
     fb4:	8f 87       	std	Y+15, r24	; 0x0f
     fb6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb8:	98 89       	ldd	r25, Y+16	; 0x10
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	f1 f7       	brne	.-4      	; 0xfba <H_Buzzer_Void_BuzzerTwice+0x1e4>
     fbe:	98 8b       	std	Y+16, r25	; 0x10
     fc0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(BUZZER_OFF_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
     fc2:	84 e2       	ldi	r24, 0x24	; 36
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a8 ec       	ldi	r26, 0xC8	; 200
     fd0:	b2 e4       	ldi	r27, 0x42	; 66
     fd2:	8b 87       	std	Y+11, r24	; 0x0b
     fd4:	9c 87       	std	Y+12, r25	; 0x0c
     fd6:	ad 87       	std	Y+13, r26	; 0x0d
     fd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fda:	6b 85       	ldd	r22, Y+11	; 0x0b
     fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fde:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a e7       	ldi	r20, 0x7A	; 122
     fe8:	55 e4       	ldi	r21, 0x45	; 69
     fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8f 83       	std	Y+7, r24	; 0x07
     ff4:	98 87       	std	Y+8, r25	; 0x08
     ff6:	a9 87       	std	Y+9, r26	; 0x09
     ff8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ffa:	6f 81       	ldd	r22, Y+7	; 0x07
     ffc:	78 85       	ldd	r23, Y+8	; 0x08
     ffe:	89 85       	ldd	r24, Y+9	; 0x09
    1000:	9a 85       	ldd	r25, Y+10	; 0x0a
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f4       	brge	.+10     	; 0x101c <H_Buzzer_Void_BuzzerTwice+0x246>
		__ticks = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9e 83       	std	Y+6, r25	; 0x06
    1018:	8d 83       	std	Y+5, r24	; 0x05
    101a:	3f c0       	rjmp	.+126    	; 0x109a <H_Buzzer_Void_BuzzerTwice+0x2c4>
	else if (__tmp > 65535)
    101c:	6f 81       	ldd	r22, Y+7	; 0x07
    101e:	78 85       	ldd	r23, Y+8	; 0x08
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	9a 85       	ldd	r25, Y+10	; 0x0a
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1030:	18 16       	cp	r1, r24
    1032:	4c f5       	brge	.+82     	; 0x1086 <H_Buzzer_Void_BuzzerTwice+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1034:	6b 85       	ldd	r22, Y+11	; 0x0b
    1036:	7c 85       	ldd	r23, Y+12	; 0x0c
    1038:	8d 85       	ldd	r24, Y+13	; 0x0d
    103a:	9e 85       	ldd	r25, Y+14	; 0x0e
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
    105c:	0f c0       	rjmp	.+30     	; 0x107c <H_Buzzer_Void_BuzzerTwice+0x2a6>
    105e:	80 e9       	ldi	r24, 0x90	; 144
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <H_Buzzer_Void_BuzzerTwice+0x294>
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9e 83       	std	Y+6, r25	; 0x06
    107a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	9e 81       	ldd	r25, Y+6	; 0x06
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	69 f7       	brne	.-38     	; 0x105e <H_Buzzer_Void_BuzzerTwice+0x288>
    1084:	14 c0       	rjmp	.+40     	; 0x10ae <H_Buzzer_Void_BuzzerTwice+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1086:	6f 81       	ldd	r22, Y+7	; 0x07
    1088:	78 85       	ldd	r23, Y+8	; 0x08
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <H_Buzzer_Void_BuzzerTwice+0x2d0>
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_ON_TIME);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
    10ae:	84 e2       	ldi	r24, 0x24	; 36
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
}
    10b6:	aa 96       	adiw	r28, 0x2a	; 42
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	2a 97       	sbiw	r28, 0x0a	; 10
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	8b 83       	std	Y+3, r24	; 0x03
    10de:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9a e0       	ldi	r25, 0x0A	; 10
    10e4:	69 2f       	mov	r22, r25
    10e6:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__udivmodqi4>
    10ea:	89 2f       	mov	r24, r25
    10ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9a e0       	ldi	r25, 0x0A	; 10
    10f2:	69 2f       	mov	r22, r25
    10f4:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__udivmodqi4>
    10f8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3a 87       	std	Y+10, r19	; 0x0a
    1102:	29 87       	std	Y+9, r18	; 0x09
    1104:	89 85       	ldd	r24, Y+9	; 0x09
    1106:	9a 85       	ldd	r25, Y+10	; 0x0a
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	39 f0       	breq	.+14     	; 0x111a <M_DIO_Void_SetPinDirection+0x52>
    110c:	29 85       	ldd	r18, Y+9	; 0x09
    110e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1110:	21 30       	cpi	r18, 0x01	; 1
    1112:	31 05       	cpc	r19, r1
    1114:	09 f4       	brne	.+2      	; 0x1118 <M_DIO_Void_SetPinDirection+0x50>
    1116:	76 c0       	rjmp	.+236    	; 0x1204 <M_DIO_Void_SetPinDirection+0x13c>
    1118:	e4 c0       	rjmp	.+456    	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	38 87       	std	Y+8, r19	; 0x08
    1122:	2f 83       	std	Y+7, r18	; 0x07
    1124:	8f 81       	ldd	r24, Y+7	; 0x07
    1126:	98 85       	ldd	r25, Y+8	; 0x08
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	91 05       	cpc	r25, r1
    112c:	61 f1       	breq	.+88     	; 0x1186 <M_DIO_Void_SetPinDirection+0xbe>
    112e:	2f 81       	ldd	r18, Y+7	; 0x07
    1130:	38 85       	ldd	r19, Y+8	; 0x08
    1132:	23 30       	cpi	r18, 0x03	; 3
    1134:	31 05       	cpc	r19, r1
    1136:	34 f4       	brge	.+12     	; 0x1144 <M_DIO_Void_SetPinDirection+0x7c>
    1138:	8f 81       	ldd	r24, Y+7	; 0x07
    113a:	98 85       	ldd	r25, Y+8	; 0x08
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	69 f0       	breq	.+26     	; 0x115c <M_DIO_Void_SetPinDirection+0x94>
    1142:	cf c0       	rjmp	.+414    	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
    1144:	2f 81       	ldd	r18, Y+7	; 0x07
    1146:	38 85       	ldd	r19, Y+8	; 0x08
    1148:	23 30       	cpi	r18, 0x03	; 3
    114a:	31 05       	cpc	r19, r1
    114c:	89 f1       	breq	.+98     	; 0x11b0 <M_DIO_Void_SetPinDirection+0xe8>
    114e:	8f 81       	ldd	r24, Y+7	; 0x07
    1150:	98 85       	ldd	r25, Y+8	; 0x08
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	91 05       	cpc	r25, r1
    1156:	09 f4       	brne	.+2      	; 0x115a <M_DIO_Void_SetPinDirection+0x92>
    1158:	40 c0       	rjmp	.+128    	; 0x11da <M_DIO_Void_SetPinDirection+0x112>
    115a:	c3 c0       	rjmp	.+390    	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    115c:	aa e3       	ldi	r26, 0x3A	; 58
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ea e3       	ldi	r30, 0x3A	; 58
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <M_DIO_Void_SetPinDirection+0xb2>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <M_DIO_Void_SetPinDirection+0xae>
    117e:	80 95       	com	r24
    1180:	84 23       	and	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	ae c0       	rjmp	.+348    	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    1186:	a7 e3       	ldi	r26, 0x37	; 55
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e7 e3       	ldi	r30, 0x37	; 55
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <M_DIO_Void_SetPinDirection+0xdc>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <M_DIO_Void_SetPinDirection+0xd8>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	99 c0       	rjmp	.+306    	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    11b0:	a4 e3       	ldi	r26, 0x34	; 52
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e4 e3       	ldi	r30, 0x34	; 52
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <M_DIO_Void_SetPinDirection+0x106>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <M_DIO_Void_SetPinDirection+0x102>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	84 c0       	rjmp	.+264    	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    11da:	a1 e3       	ldi	r26, 0x31	; 49
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e1 e3       	ldi	r30, 0x31	; 49
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <M_DIO_Void_SetPinDirection+0x130>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <M_DIO_Void_SetPinDirection+0x12c>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	6f c0       	rjmp	.+222    	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
	case OUTPUT:
		switch(Local_U8_Group)
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3e 83       	std	Y+6, r19	; 0x06
    120c:	2d 83       	std	Y+5, r18	; 0x05
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	91 05       	cpc	r25, r1
    1216:	51 f1       	breq	.+84     	; 0x126c <M_DIO_Void_SetPinDirection+0x1a4>
    1218:	2d 81       	ldd	r18, Y+5	; 0x05
    121a:	3e 81       	ldd	r19, Y+6	; 0x06
    121c:	23 30       	cpi	r18, 0x03	; 3
    121e:	31 05       	cpc	r19, r1
    1220:	34 f4       	brge	.+12     	; 0x122e <M_DIO_Void_SetPinDirection+0x166>
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	61 f0       	breq	.+24     	; 0x1244 <M_DIO_Void_SetPinDirection+0x17c>
    122c:	5a c0       	rjmp	.+180    	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
    122e:	2d 81       	ldd	r18, Y+5	; 0x05
    1230:	3e 81       	ldd	r19, Y+6	; 0x06
    1232:	23 30       	cpi	r18, 0x03	; 3
    1234:	31 05       	cpc	r19, r1
    1236:	71 f1       	breq	.+92     	; 0x1294 <M_DIO_Void_SetPinDirection+0x1cc>
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	91 05       	cpc	r25, r1
    1240:	e9 f1       	breq	.+122    	; 0x12bc <M_DIO_Void_SetPinDirection+0x1f4>
    1242:	4f c0       	rjmp	.+158    	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    1244:	aa e3       	ldi	r26, 0x3A	; 58
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	ea e3       	ldi	r30, 0x3A	; 58
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <M_DIO_Void_SetPinDirection+0x19a>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <M_DIO_Void_SetPinDirection+0x196>
    1266:	84 2b       	or	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	3b c0       	rjmp	.+118    	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    126c:	a7 e3       	ldi	r26, 0x37	; 55
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e7 e3       	ldi	r30, 0x37	; 55
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <M_DIO_Void_SetPinDirection+0x1c2>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <M_DIO_Void_SetPinDirection+0x1be>
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	27 c0       	rjmp	.+78     	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    1294:	a4 e3       	ldi	r26, 0x34	; 52
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e4 e3       	ldi	r30, 0x34	; 52
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <M_DIO_Void_SetPinDirection+0x1ea>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <M_DIO_Void_SetPinDirection+0x1e6>
    12b6:	84 2b       	or	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	13 c0       	rjmp	.+38     	; 0x12e2 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    12bc:	a1 e3       	ldi	r26, 0x31	; 49
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e1 e3       	ldi	r30, 0x31	; 49
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <M_DIO_Void_SetPinDirection+0x212>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <M_DIO_Void_SetPinDirection+0x20e>
    12de:	84 2b       	or	r24, r20
    12e0:	8c 93       	st	X, r24
		default:                                break;
		}
		break;
	default:    break;
	}
}
    12e2:	2a 96       	adiw	r28, 0x0a	; 10
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	2a 97       	sbiw	r28, 0x0a	; 10
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	8b 83       	std	Y+3, r24	; 0x03
    130a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9a e0       	ldi	r25, 0x0A	; 10
    1310:	69 2f       	mov	r22, r25
    1312:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__udivmodqi4>
    1316:	89 2f       	mov	r24, r25
    1318:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9a e0       	ldi	r25, 0x0A	; 10
    131e:	69 2f       	mov	r22, r25
    1320:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__udivmodqi4>
    1324:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3a 87       	std	Y+10, r19	; 0x0a
    132e:	29 87       	std	Y+9, r18	; 0x09
    1330:	89 85       	ldd	r24, Y+9	; 0x09
    1332:	9a 85       	ldd	r25, Y+10	; 0x0a
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	39 f0       	breq	.+14     	; 0x1346 <M_DIO_Void_SetPinValue+0x52>
    1338:	29 85       	ldd	r18, Y+9	; 0x09
    133a:	3a 85       	ldd	r19, Y+10	; 0x0a
    133c:	21 30       	cpi	r18, 0x01	; 1
    133e:	31 05       	cpc	r19, r1
    1340:	09 f4       	brne	.+2      	; 0x1344 <M_DIO_Void_SetPinValue+0x50>
    1342:	76 c0       	rjmp	.+236    	; 0x1430 <M_DIO_Void_SetPinValue+0x13c>
    1344:	e4 c0       	rjmp	.+456    	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	38 87       	std	Y+8, r19	; 0x08
    134e:	2f 83       	std	Y+7, r18	; 0x07
    1350:	8f 81       	ldd	r24, Y+7	; 0x07
    1352:	98 85       	ldd	r25, Y+8	; 0x08
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	91 05       	cpc	r25, r1
    1358:	61 f1       	breq	.+88     	; 0x13b2 <M_DIO_Void_SetPinValue+0xbe>
    135a:	2f 81       	ldd	r18, Y+7	; 0x07
    135c:	38 85       	ldd	r19, Y+8	; 0x08
    135e:	23 30       	cpi	r18, 0x03	; 3
    1360:	31 05       	cpc	r19, r1
    1362:	34 f4       	brge	.+12     	; 0x1370 <M_DIO_Void_SetPinValue+0x7c>
    1364:	8f 81       	ldd	r24, Y+7	; 0x07
    1366:	98 85       	ldd	r25, Y+8	; 0x08
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	69 f0       	breq	.+26     	; 0x1388 <M_DIO_Void_SetPinValue+0x94>
    136e:	cf c0       	rjmp	.+414    	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
    1370:	2f 81       	ldd	r18, Y+7	; 0x07
    1372:	38 85       	ldd	r19, Y+8	; 0x08
    1374:	23 30       	cpi	r18, 0x03	; 3
    1376:	31 05       	cpc	r19, r1
    1378:	89 f1       	breq	.+98     	; 0x13dc <M_DIO_Void_SetPinValue+0xe8>
    137a:	8f 81       	ldd	r24, Y+7	; 0x07
    137c:	98 85       	ldd	r25, Y+8	; 0x08
    137e:	84 30       	cpi	r24, 0x04	; 4
    1380:	91 05       	cpc	r25, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <M_DIO_Void_SetPinValue+0x92>
    1384:	40 c0       	rjmp	.+128    	; 0x1406 <M_DIO_Void_SetPinValue+0x112>
    1386:	c3 c0       	rjmp	.+390    	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1388:	ab e3       	ldi	r26, 0x3B	; 59
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	eb e3       	ldi	r30, 0x3B	; 59
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <M_DIO_Void_SetPinValue+0xb2>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <M_DIO_Void_SetPinValue+0xae>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	ae c0       	rjmp	.+348    	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    13b2:	a8 e3       	ldi	r26, 0x38	; 56
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e8 e3       	ldi	r30, 0x38	; 56
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <M_DIO_Void_SetPinValue+0xdc>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <M_DIO_Void_SetPinValue+0xd8>
    13d4:	80 95       	com	r24
    13d6:	84 23       	and	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	99 c0       	rjmp	.+306    	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    13dc:	a5 e3       	ldi	r26, 0x35	; 53
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e3       	ldi	r30, 0x35	; 53
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <M_DIO_Void_SetPinValue+0x106>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <M_DIO_Void_SetPinValue+0x102>
    13fe:	80 95       	com	r24
    1400:	84 23       	and	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	84 c0       	rjmp	.+264    	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1406:	a2 e3       	ldi	r26, 0x32	; 50
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e2 e3       	ldi	r30, 0x32	; 50
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <M_DIO_Void_SetPinValue+0x130>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <M_DIO_Void_SetPinValue+0x12c>
    1428:	80 95       	com	r24
    142a:	84 23       	and	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	6f c0       	rjmp	.+222    	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
	case HIGH:
		switch(Local_U8_Group)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3e 83       	std	Y+6, r19	; 0x06
    1438:	2d 83       	std	Y+5, r18	; 0x05
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	91 05       	cpc	r25, r1
    1442:	51 f1       	breq	.+84     	; 0x1498 <M_DIO_Void_SetPinValue+0x1a4>
    1444:	2d 81       	ldd	r18, Y+5	; 0x05
    1446:	3e 81       	ldd	r19, Y+6	; 0x06
    1448:	23 30       	cpi	r18, 0x03	; 3
    144a:	31 05       	cpc	r19, r1
    144c:	34 f4       	brge	.+12     	; 0x145a <M_DIO_Void_SetPinValue+0x166>
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	91 05       	cpc	r25, r1
    1456:	61 f0       	breq	.+24     	; 0x1470 <M_DIO_Void_SetPinValue+0x17c>
    1458:	5a c0       	rjmp	.+180    	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
    145a:	2d 81       	ldd	r18, Y+5	; 0x05
    145c:	3e 81       	ldd	r19, Y+6	; 0x06
    145e:	23 30       	cpi	r18, 0x03	; 3
    1460:	31 05       	cpc	r19, r1
    1462:	71 f1       	breq	.+92     	; 0x14c0 <M_DIO_Void_SetPinValue+0x1cc>
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	91 05       	cpc	r25, r1
    146c:	e9 f1       	breq	.+122    	; 0x14e8 <M_DIO_Void_SetPinValue+0x1f4>
    146e:	4f c0       	rjmp	.+158    	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1470:	ab e3       	ldi	r26, 0x3B	; 59
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	eb e3       	ldi	r30, 0x3B	; 59
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 2e       	mov	r0, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <M_DIO_Void_SetPinValue+0x19a>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <M_DIO_Void_SetPinValue+0x196>
    1492:	84 2b       	or	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	3b c0       	rjmp	.+118    	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1498:	a8 e3       	ldi	r26, 0x38	; 56
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e8 e3       	ldi	r30, 0x38	; 56
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <M_DIO_Void_SetPinValue+0x1c2>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <M_DIO_Void_SetPinValue+0x1be>
    14ba:	84 2b       	or	r24, r20
    14bc:	8c 93       	st	X, r24
    14be:	27 c0       	rjmp	.+78     	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    14c0:	a5 e3       	ldi	r26, 0x35	; 53
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e5 e3       	ldi	r30, 0x35	; 53
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <M_DIO_Void_SetPinValue+0x1ea>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <M_DIO_Void_SetPinValue+0x1e6>
    14e2:	84 2b       	or	r24, r20
    14e4:	8c 93       	st	X, r24
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <M_DIO_Void_SetPinValue+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    14e8:	a2 e3       	ldi	r26, 0x32	; 50
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e2 e3       	ldi	r30, 0x32	; 50
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <M_DIO_Void_SetPinValue+0x212>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <M_DIO_Void_SetPinValue+0x20e>
    150a:	84 2b       	or	r24, r20
    150c:	8c 93       	st	X, r24
		default:                                 break;
		}
		break;
	default:    break;
	}
}
    150e:	2a 96       	adiw	r28, 0x0a	; 10
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <M_DIO_Void_GetPinValue+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <M_DIO_Void_GetPinValue+0x8>
    1528:	00 d0       	rcall	.+0      	; 0x152a <M_DIO_Void_GetPinValue+0xa>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9a e0       	ldi	r25, 0x0A	; 10
    1534:	69 2f       	mov	r22, r25
    1536:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__udivmodqi4>
    153a:	89 2f       	mov	r24, r25
    153c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9a e0       	ldi	r25, 0x0A	; 10
    1542:	69 2f       	mov	r22, r25
    1544:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__udivmodqi4>
    1548:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    154a:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3e 83       	std	Y+6, r19	; 0x06
    1554:	2d 83       	std	Y+5, r18	; 0x05
    1556:	4d 81       	ldd	r20, Y+5	; 0x05
    1558:	5e 81       	ldd	r21, Y+6	; 0x06
    155a:	42 30       	cpi	r20, 0x02	; 2
    155c:	51 05       	cpc	r21, r1
    155e:	41 f1       	breq	.+80     	; 0x15b0 <M_DIO_Void_GetPinValue+0x90>
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	91 05       	cpc	r25, r1
    1568:	34 f4       	brge	.+12     	; 0x1576 <M_DIO_Void_GetPinValue+0x56>
    156a:	2d 81       	ldd	r18, Y+5	; 0x05
    156c:	3e 81       	ldd	r19, Y+6	; 0x06
    156e:	21 30       	cpi	r18, 0x01	; 1
    1570:	31 05       	cpc	r19, r1
    1572:	61 f0       	breq	.+24     	; 0x158c <M_DIO_Void_GetPinValue+0x6c>
    1574:	52 c0       	rjmp	.+164    	; 0x161a <M_DIO_Void_GetPinValue+0xfa>
    1576:	4d 81       	ldd	r20, Y+5	; 0x05
    1578:	5e 81       	ldd	r21, Y+6	; 0x06
    157a:	43 30       	cpi	r20, 0x03	; 3
    157c:	51 05       	cpc	r21, r1
    157e:	51 f1       	breq	.+84     	; 0x15d4 <M_DIO_Void_GetPinValue+0xb4>
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	91 05       	cpc	r25, r1
    1588:	b9 f1       	breq	.+110    	; 0x15f8 <M_DIO_Void_GetPinValue+0xd8>
    158a:	47 c0       	rjmp	.+142    	; 0x161a <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    158c:	e9 e3       	ldi	r30, 0x39	; 57
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a9 01       	movw	r20, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <M_DIO_Void_GetPinValue+0x84>
    15a0:	55 95       	asr	r21
    15a2:	47 95       	ror	r20
    15a4:	8a 95       	dec	r24
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <M_DIO_Void_GetPinValue+0x80>
    15a8:	ca 01       	movw	r24, r20
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	35 c0       	rjmp	.+106    	; 0x161a <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    15b0:	e6 e3       	ldi	r30, 0x36	; 54
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a9 01       	movw	r20, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <M_DIO_Void_GetPinValue+0xa8>
    15c4:	55 95       	asr	r21
    15c6:	47 95       	ror	r20
    15c8:	8a 95       	dec	r24
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <M_DIO_Void_GetPinValue+0xa4>
    15cc:	ca 01       	movw	r24, r20
    15ce:	81 70       	andi	r24, 0x01	; 1
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	23 c0       	rjmp	.+70     	; 0x161a <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    15d4:	e3 e3       	ldi	r30, 0x33	; 51
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <M_DIO_Void_GetPinValue+0xcc>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <M_DIO_Void_GetPinValue+0xc8>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	11 c0       	rjmp	.+34     	; 0x161a <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    15f8:	e0 e3       	ldi	r30, 0x30	; 48
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <M_DIO_Void_GetPinValue+0xf0>
    160c:	55 95       	asr	r21
    160e:	47 95       	ror	r20
    1610:	8a 95       	dec	r24
    1612:	e2 f7       	brpl	.-8      	; 0x160c <M_DIO_Void_GetPinValue+0xec>
    1614:	ca 01       	movw	r24, r20
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
}
    161c:	26 96       	adiw	r28, 0x06	; 6
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <M_DIO_Void_TogPin+0x6>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <M_DIO_Void_TogPin+0x8>
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9a e0       	ldi	r25, 0x0A	; 10
    1642:	69 2f       	mov	r22, r25
    1644:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__udivmodqi4>
    1648:	89 2f       	mov	r24, r25
    164a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9a e0       	ldi	r25, 0x0A	; 10
    1650:	69 2f       	mov	r22, r25
    1652:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__udivmodqi4>
    1656:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3d 83       	std	Y+5, r19	; 0x05
    1660:	2c 83       	std	Y+4, r18	; 0x04
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	82 30       	cpi	r24, 0x02	; 2
    1668:	91 05       	cpc	r25, r1
    166a:	51 f1       	breq	.+84     	; 0x16c0 <M_DIO_Void_TogPin+0x92>
    166c:	2c 81       	ldd	r18, Y+4	; 0x04
    166e:	3d 81       	ldd	r19, Y+5	; 0x05
    1670:	23 30       	cpi	r18, 0x03	; 3
    1672:	31 05       	cpc	r19, r1
    1674:	34 f4       	brge	.+12     	; 0x1682 <M_DIO_Void_TogPin+0x54>
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	9d 81       	ldd	r25, Y+5	; 0x05
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	91 05       	cpc	r25, r1
    167e:	61 f0       	breq	.+24     	; 0x1698 <M_DIO_Void_TogPin+0x6a>
    1680:	5a c0       	rjmp	.+180    	; 0x1736 <M_DIO_Void_TogPin+0x108>
    1682:	2c 81       	ldd	r18, Y+4	; 0x04
    1684:	3d 81       	ldd	r19, Y+5	; 0x05
    1686:	23 30       	cpi	r18, 0x03	; 3
    1688:	31 05       	cpc	r19, r1
    168a:	71 f1       	breq	.+92     	; 0x16e8 <M_DIO_Void_TogPin+0xba>
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	9d 81       	ldd	r25, Y+5	; 0x05
    1690:	84 30       	cpi	r24, 0x04	; 4
    1692:	91 05       	cpc	r25, r1
    1694:	e9 f1       	breq	.+122    	; 0x1710 <M_DIO_Void_TogPin+0xe2>
    1696:	4f c0       	rjmp	.+158    	; 0x1736 <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1698:	ab e3       	ldi	r26, 0x3B	; 59
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	eb e3       	ldi	r30, 0x3B	; 59
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <M_DIO_Void_TogPin+0x88>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <M_DIO_Void_TogPin+0x84>
    16ba:	84 27       	eor	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	3b c0       	rjmp	.+118    	; 0x1736 <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    16c0:	a8 e3       	ldi	r26, 0x38	; 56
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e8 e3       	ldi	r30, 0x38	; 56
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <M_DIO_Void_TogPin+0xb0>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <M_DIO_Void_TogPin+0xac>
    16e2:	84 27       	eor	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	27 c0       	rjmp	.+78     	; 0x1736 <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    16e8:	a5 e3       	ldi	r26, 0x35	; 53
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e5 e3       	ldi	r30, 0x35	; 53
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <M_DIO_Void_TogPin+0xd8>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <M_DIO_Void_TogPin+0xd4>
    170a:	84 27       	eor	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	13 c0       	rjmp	.+38     	; 0x1736 <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    1710:	a2 e3       	ldi	r26, 0x32	; 50
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e2 e3       	ldi	r30, 0x32	; 50
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <M_DIO_Void_TogPin+0x100>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <M_DIO_Void_TogPin+0xfc>
    1732:	84 27       	eor	r24, r20
    1734:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	2a 97       	sbiw	r28, 0x0a	; 10
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	8b 83       	std	Y+3, r24	; 0x03
    175c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9a e0       	ldi	r25, 0x0A	; 10
    1762:	69 2f       	mov	r22, r25
    1764:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__udivmodqi4>
    1768:	89 2f       	mov	r24, r25
    176a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9a e0       	ldi	r25, 0x0A	; 10
    1770:	69 2f       	mov	r22, r25
    1772:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__udivmodqi4>
    1776:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	3a 87       	std	Y+10, r19	; 0x0a
    1780:	29 87       	std	Y+9, r18	; 0x09
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	39 f0       	breq	.+14     	; 0x1798 <M_DIO_Void_SetPinPullUpRes+0x52>
    178a:	29 85       	ldd	r18, Y+9	; 0x09
    178c:	3a 85       	ldd	r19, Y+10	; 0x0a
    178e:	21 30       	cpi	r18, 0x01	; 1
    1790:	31 05       	cpc	r19, r1
    1792:	09 f4       	brne	.+2      	; 0x1796 <M_DIO_Void_SetPinPullUpRes+0x50>
    1794:	76 c0       	rjmp	.+236    	; 0x1882 <M_DIO_Void_SetPinPullUpRes+0x13c>
    1796:	e4 c0       	rjmp	.+456    	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	38 87       	std	Y+8, r19	; 0x08
    17a0:	2f 83       	std	Y+7, r18	; 0x07
    17a2:	8f 81       	ldd	r24, Y+7	; 0x07
    17a4:	98 85       	ldd	r25, Y+8	; 0x08
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	91 05       	cpc	r25, r1
    17aa:	61 f1       	breq	.+88     	; 0x1804 <M_DIO_Void_SetPinPullUpRes+0xbe>
    17ac:	2f 81       	ldd	r18, Y+7	; 0x07
    17ae:	38 85       	ldd	r19, Y+8	; 0x08
    17b0:	23 30       	cpi	r18, 0x03	; 3
    17b2:	31 05       	cpc	r19, r1
    17b4:	34 f4       	brge	.+12     	; 0x17c2 <M_DIO_Void_SetPinPullUpRes+0x7c>
    17b6:	8f 81       	ldd	r24, Y+7	; 0x07
    17b8:	98 85       	ldd	r25, Y+8	; 0x08
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	91 05       	cpc	r25, r1
    17be:	69 f0       	breq	.+26     	; 0x17da <M_DIO_Void_SetPinPullUpRes+0x94>
    17c0:	cf c0       	rjmp	.+414    	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
    17c2:	2f 81       	ldd	r18, Y+7	; 0x07
    17c4:	38 85       	ldd	r19, Y+8	; 0x08
    17c6:	23 30       	cpi	r18, 0x03	; 3
    17c8:	31 05       	cpc	r19, r1
    17ca:	89 f1       	breq	.+98     	; 0x182e <M_DIO_Void_SetPinPullUpRes+0xe8>
    17cc:	8f 81       	ldd	r24, Y+7	; 0x07
    17ce:	98 85       	ldd	r25, Y+8	; 0x08
    17d0:	84 30       	cpi	r24, 0x04	; 4
    17d2:	91 05       	cpc	r25, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <M_DIO_Void_SetPinPullUpRes+0x92>
    17d6:	40 c0       	rjmp	.+128    	; 0x1858 <M_DIO_Void_SetPinPullUpRes+0x112>
    17d8:	c3 c0       	rjmp	.+390    	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    17da:	ab e3       	ldi	r26, 0x3B	; 59
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	eb e3       	ldi	r30, 0x3B	; 59
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <M_DIO_Void_SetPinPullUpRes+0xb2>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <M_DIO_Void_SetPinPullUpRes+0xae>
    17fc:	80 95       	com	r24
    17fe:	84 23       	and	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	ae c0       	rjmp	.+348    	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1804:	a8 e3       	ldi	r26, 0x38	; 56
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e8 e3       	ldi	r30, 0x38	; 56
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	02 2e       	mov	r0, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <M_DIO_Void_SetPinPullUpRes+0xdc>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <M_DIO_Void_SetPinPullUpRes+0xd8>
    1826:	80 95       	com	r24
    1828:	84 23       	and	r24, r20
    182a:	8c 93       	st	X, r24
    182c:	99 c0       	rjmp	.+306    	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    182e:	a5 e3       	ldi	r26, 0x35	; 53
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e3       	ldi	r30, 0x35	; 53
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <M_DIO_Void_SetPinPullUpRes+0x106>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <M_DIO_Void_SetPinPullUpRes+0x102>
    1850:	80 95       	com	r24
    1852:	84 23       	and	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	84 c0       	rjmp	.+264    	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1858:	a2 e3       	ldi	r26, 0x32	; 50
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e2 e3       	ldi	r30, 0x32	; 50
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <M_DIO_Void_SetPinPullUpRes+0x130>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <M_DIO_Void_SetPinPullUpRes+0x12c>
    187a:	80 95       	com	r24
    187c:	84 23       	and	r24, r20
    187e:	8c 93       	st	X, r24
    1880:	6f c0       	rjmp	.+222    	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
	case ENABLE:
		switch(Local_U8_Group)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	3e 83       	std	Y+6, r19	; 0x06
    188a:	2d 83       	std	Y+5, r18	; 0x05
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	82 30       	cpi	r24, 0x02	; 2
    1892:	91 05       	cpc	r25, r1
    1894:	51 f1       	breq	.+84     	; 0x18ea <M_DIO_Void_SetPinPullUpRes+0x1a4>
    1896:	2d 81       	ldd	r18, Y+5	; 0x05
    1898:	3e 81       	ldd	r19, Y+6	; 0x06
    189a:	23 30       	cpi	r18, 0x03	; 3
    189c:	31 05       	cpc	r19, r1
    189e:	34 f4       	brge	.+12     	; 0x18ac <M_DIO_Void_SetPinPullUpRes+0x166>
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	91 05       	cpc	r25, r1
    18a8:	61 f0       	breq	.+24     	; 0x18c2 <M_DIO_Void_SetPinPullUpRes+0x17c>
    18aa:	5a c0       	rjmp	.+180    	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
    18ac:	2d 81       	ldd	r18, Y+5	; 0x05
    18ae:	3e 81       	ldd	r19, Y+6	; 0x06
    18b0:	23 30       	cpi	r18, 0x03	; 3
    18b2:	31 05       	cpc	r19, r1
    18b4:	71 f1       	breq	.+92     	; 0x1912 <M_DIO_Void_SetPinPullUpRes+0x1cc>
    18b6:	8d 81       	ldd	r24, Y+5	; 0x05
    18b8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	91 05       	cpc	r25, r1
    18be:	e9 f1       	breq	.+122    	; 0x193a <M_DIO_Void_SetPinPullUpRes+0x1f4>
    18c0:	4f c0       	rjmp	.+158    	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    18c2:	ab e3       	ldi	r26, 0x3B	; 59
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <M_DIO_Void_SetPinPullUpRes+0x19a>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <M_DIO_Void_SetPinPullUpRes+0x196>
    18e4:	84 2b       	or	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	3b c0       	rjmp	.+118    	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    18ea:	a8 e3       	ldi	r26, 0x38	; 56
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e8 e3       	ldi	r30, 0x38	; 56
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <M_DIO_Void_SetPinPullUpRes+0x1be>
    190c:	84 2b       	or	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	27 c0       	rjmp	.+78     	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1912:	a5 e3       	ldi	r26, 0x35	; 53
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e5 e3       	ldi	r30, 0x35	; 53
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <M_DIO_Void_SetPinPullUpRes+0x1ea>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <M_DIO_Void_SetPinPullUpRes+0x1e6>
    1934:	84 2b       	or	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	13 c0       	rjmp	.+38     	; 0x1960 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    193a:	a2 e3       	ldi	r26, 0x32	; 50
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e2 e3       	ldi	r30, 0x32	; 50
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <M_DIO_Void_SetPinPullUpRes+0x212>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <M_DIO_Void_SetPinPullUpRes+0x20e>
    195c:	84 2b       	or	r24, r20
    195e:	8c 93       	st	X, r24
		default:                                 break;
		}
		break;
	default:    break;
	}
}
    1960:	2a 96       	adiw	r28, 0x0a	; 10
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <M_EXTINT_Void_EXTINTInit>:
void(*ExtInt0_CallBack)(void);
void(*ExtInt1_CallBack)(void);
void(*ExtInt2_CallBack)(void);

void M_EXTINT_Void_EXTINTInit(u8 Copy_U8_ExtIntChannel)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <M_EXTINT_Void_EXTINTInit+0x6>
    1978:	0f 92       	push	r0
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_ExtIntChannel)
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	3b 83       	std	Y+3, r19	; 0x03
    1988:	2a 83       	std	Y+2, r18	; 0x02
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	91 05       	cpc	r25, r1
    1992:	f9 f0       	breq	.+62     	; 0x19d2 <M_EXTINT_Void_EXTINTInit+0x60>
    1994:	2a 81       	ldd	r18, Y+2	; 0x02
    1996:	3b 81       	ldd	r19, Y+3	; 0x03
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	81 f1       	breq	.+96     	; 0x19fe <M_EXTINT_Void_EXTINTInit+0x8c>
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	d1 f5       	brne	.+116    	; 0x1a1a <M_EXTINT_Void_EXTINTInit+0xa8>
	{
	case INT0_CHANNEL:
#if   EXTINT0_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC00_BIT);
    19a6:	a5 e5       	ldi	r26, 0x55	; 85
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e5 e5       	ldi	r30, 0x55	; 85
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	8e 7f       	andi	r24, 0xFE	; 254
    19b2:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
    19b4:	a5 e5       	ldi	r26, 0x55	; 85
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e5 e5       	ldi	r30, 0x55	; 85
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	82 60       	ori	r24, 0x02	; 2
    19c0:	8c 93       	st	X, r24
#elif EXTINT0_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT0_BIT);
    19c2:	ab e5       	ldi	r26, 0x5B	; 91
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	eb e5       	ldi	r30, 0x5B	; 91
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	80 64       	ori	r24, 0x40	; 64
    19ce:	8c 93       	st	X, r24
    19d0:	24 c0       	rjmp	.+72     	; 0x1a1a <M_EXTINT_Void_EXTINTInit+0xa8>
	case INT1_CHANNEL:
#if   EXTINT1_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC10_BIT);
		SET_BIT(MCUCR_REG,ISC11_BIT);
#elif EXTINT1_SENSE_CONTROL   ==   EXT_INT_RISING_EDGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
    19d2:	a5 e5       	ldi	r26, 0x55	; 85
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e5 e5       	ldi	r30, 0x55	; 85
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	84 60       	ori	r24, 0x04	; 4
    19de:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
    19e0:	a5 e5       	ldi	r26, 0x55	; 85
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e5 e5       	ldi	r30, 0x55	; 85
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	88 60       	ori	r24, 0x08	; 8
    19ec:	8c 93       	st	X, r24
#elif EXTINT1_SENSE_CONTROL   ==   EXT_INT_ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		CLR_BIT(MCUCR_REG,ISC11_BIT);
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT1_BIT);
    19ee:	ab e5       	ldi	r26, 0x5B	; 91
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	eb e5       	ldi	r30, 0x5B	; 91
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	80 68       	ori	r24, 0x80	; 128
    19fa:	8c 93       	st	X, r24
    19fc:	0e c0       	rjmp	.+28     	; 0x1a1a <M_EXTINT_Void_EXTINTInit+0xa8>
		break;
	case INT2_CHANNEL:
#if   EXTINT2_SENSE_CONTROL   ==   EXT_INT_FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#elif EXTINT2_SENSE_CONTROL   ==   EXT_INT_RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
    19fe:	a4 e5       	ldi	r26, 0x54	; 84
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e4 e5       	ldi	r30, 0x54	; 84
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	80 64       	ori	r24, 0x40	; 64
    1a0a:	8c 93       	st	X, r24
#endif
		// to enable int0 local int
		SET_BIT(GICR_REG,INT2_BIT);
    1a0c:	ab e5       	ldi	r26, 0x5B	; 91
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	eb e5       	ldi	r30, 0x5B	; 91
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 62       	ori	r24, 0x20	; 32
    1a18:	8c 93       	st	X, r24
		break;
	default:                                           break;
	}
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <M_EXTINT_Void_SetCallBack>:

void M_EXTINT_Void_SetCallBack(u8 Copy_U8_ExtIntChannel,void(*Copy_ptr)(void))
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <M_EXTINT_Void_SetCallBack+0x6>
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <M_EXTINT_Void_SetCallBack+0x8>
    1a2e:	0f 92       	push	r0
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	7b 83       	std	Y+3, r23	; 0x03
    1a38:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_ExtIntChannel)
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	3d 83       	std	Y+5, r19	; 0x05
    1a42:	2c 83       	std	Y+4, r18	; 0x04
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	9d 81       	ldd	r25, Y+5	; 0x05
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	81 f0       	breq	.+32     	; 0x1a6e <M_EXTINT_Void_SetCallBack+0x48>
    1a4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a50:	3d 81       	ldd	r19, Y+5	; 0x05
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	31 05       	cpc	r19, r1
    1a56:	91 f0       	breq	.+36     	; 0x1a7c <M_EXTINT_Void_SetCallBack+0x56>
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	a1 f4       	brne	.+40     	; 0x1a88 <M_EXTINT_Void_SetCallBack+0x62>
	{
	case INT0_CHANNEL:ExtInt0_CallBack = Copy_ptr; break;
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	9b 81       	ldd	r25, Y+3	; 0x03
    1a64:	90 93 98 00 	sts	0x0098, r25
    1a68:	80 93 97 00 	sts	0x0097, r24
    1a6c:	0d c0       	rjmp	.+26     	; 0x1a88 <M_EXTINT_Void_SetCallBack+0x62>
	case INT1_CHANNEL:ExtInt1_CallBack = Copy_ptr; break;
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	9b 81       	ldd	r25, Y+3	; 0x03
    1a72:	90 93 94 00 	sts	0x0094, r25
    1a76:	80 93 93 00 	sts	0x0093, r24
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <M_EXTINT_Void_SetCallBack+0x62>
	case INT2_CHANNEL:ExtInt2_CallBack = Copy_ptr; break;
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a80:	90 93 96 00 	sts	0x0096, r25
    1a84:	80 93 95 00 	sts	0x0095, r24
	default:                                       break;
	}
}
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <__vector_1>:

ISR(INT0_vect)
{
    1a98:	1f 92       	push	r1
    1a9a:	0f 92       	push	r0
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	0f 92       	push	r0
    1aa0:	11 24       	eor	r1, r1
    1aa2:	2f 93       	push	r18
    1aa4:	3f 93       	push	r19
    1aa6:	4f 93       	push	r20
    1aa8:	5f 93       	push	r21
    1aaa:	6f 93       	push	r22
    1aac:	7f 93       	push	r23
    1aae:	8f 93       	push	r24
    1ab0:	9f 93       	push	r25
    1ab2:	af 93       	push	r26
    1ab4:	bf 93       	push	r27
    1ab6:	ef 93       	push	r30
    1ab8:	ff 93       	push	r31
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
	ExtInt0_CallBack();
    1ac2:	e0 91 97 00 	lds	r30, 0x0097
    1ac6:	f0 91 98 00 	lds	r31, 0x0098
    1aca:	09 95       	icall
}
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	ff 91       	pop	r31
    1ad2:	ef 91       	pop	r30
    1ad4:	bf 91       	pop	r27
    1ad6:	af 91       	pop	r26
    1ad8:	9f 91       	pop	r25
    1ada:	8f 91       	pop	r24
    1adc:	7f 91       	pop	r23
    1ade:	6f 91       	pop	r22
    1ae0:	5f 91       	pop	r21
    1ae2:	4f 91       	pop	r20
    1ae4:	3f 91       	pop	r19
    1ae6:	2f 91       	pop	r18
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	0f 90       	pop	r0
    1aee:	1f 90       	pop	r1
    1af0:	18 95       	reti

00001af2 <__vector_2>:
ISR(INT1_vect)
{
    1af2:	1f 92       	push	r1
    1af4:	0f 92       	push	r0
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	0f 92       	push	r0
    1afa:	11 24       	eor	r1, r1
    1afc:	2f 93       	push	r18
    1afe:	3f 93       	push	r19
    1b00:	4f 93       	push	r20
    1b02:	5f 93       	push	r21
    1b04:	6f 93       	push	r22
    1b06:	7f 93       	push	r23
    1b08:	8f 93       	push	r24
    1b0a:	9f 93       	push	r25
    1b0c:	af 93       	push	r26
    1b0e:	bf 93       	push	r27
    1b10:	ef 93       	push	r30
    1b12:	ff 93       	push	r31
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
	ExtInt1_CallBack();
    1b1c:	e0 91 93 00 	lds	r30, 0x0093
    1b20:	f0 91 94 00 	lds	r31, 0x0094
    1b24:	09 95       	icall
}
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	ff 91       	pop	r31
    1b2c:	ef 91       	pop	r30
    1b2e:	bf 91       	pop	r27
    1b30:	af 91       	pop	r26
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	7f 91       	pop	r23
    1b38:	6f 91       	pop	r22
    1b3a:	5f 91       	pop	r21
    1b3c:	4f 91       	pop	r20
    1b3e:	3f 91       	pop	r19
    1b40:	2f 91       	pop	r18
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	0f 90       	pop	r0
    1b48:	1f 90       	pop	r1
    1b4a:	18 95       	reti

00001b4c <__vector_3>:
ISR(INT2_vect)
{
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	2f 93       	push	r18
    1b58:	3f 93       	push	r19
    1b5a:	4f 93       	push	r20
    1b5c:	5f 93       	push	r21
    1b5e:	6f 93       	push	r22
    1b60:	7f 93       	push	r23
    1b62:	8f 93       	push	r24
    1b64:	9f 93       	push	r25
    1b66:	af 93       	push	r26
    1b68:	bf 93       	push	r27
    1b6a:	ef 93       	push	r30
    1b6c:	ff 93       	push	r31
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
	ExtInt2_CallBack();
    1b76:	e0 91 95 00 	lds	r30, 0x0095
    1b7a:	f0 91 96 00 	lds	r31, 0x0096
    1b7e:	09 95       	icall
}
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	ff 91       	pop	r31
    1b86:	ef 91       	pop	r30
    1b88:	bf 91       	pop	r27
    1b8a:	af 91       	pop	r26
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	7f 91       	pop	r23
    1b92:	6f 91       	pop	r22
    1b94:	5f 91       	pop	r21
    1b96:	4f 91       	pop	r20
    1b98:	3f 91       	pop	r19
    1b9a:	2f 91       	pop	r18
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <GIE_voidEnable>:

#include "BitMath.h"
#include "STD.h"

void GIE_voidEnable(void)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(GIE_SREG,7);
    1bae:	af e5       	ldi	r26, 0x5F	; 95
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	ef e5       	ldi	r30, 0x5F	; 95
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 68       	ori	r24, 0x80	; 128
    1bba:	8c 93       	st	X, r24
}
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <GIE_voidDisble>:
void GIE_voidDisble(void)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(GIE_SREG,7);
    1bca:	af e5       	ldi	r26, 0x5F	; 95
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ef e5       	ldi	r30, 0x5F	; 95
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8f 77       	andi	r24, 0x7F	; 127
    1bd6:	8c 93       	st	X, r24
}
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    1be6:	84 e1       	ldi	r24, 0x14	; 20
    1be8:	61 e0       	ldi	r22, 0x01	; 1
    1bea:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1bee:	85 e1       	ldi	r24, 0x15	; 21
    1bf0:	61 e0       	ldi	r22, 0x01	; 1
    1bf2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    1bf6:	86 e1       	ldi	r24, 0x16	; 22
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1bfe:	88 e1       	ldi	r24, 0x18	; 24
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    1c06:	8d e0       	ldi	r24, 0x0D	; 13
    1c08:	61 e0       	ldi	r22, 0x01	; 1
    1c0a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1c0e:	8c e0       	ldi	r24, 0x0C	; 12
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    1c16:	83 e3       	ldi	r24, 0x33	; 51
    1c18:	0e 94 59 10 	call	0x20b2	; 0x20b2 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    1c1c:	82 e3       	ldi	r24, 0x32	; 50
    1c1e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    1c22:	88 e2       	ldi	r24, 0x28	; 40
    1c24:	0e 94 59 10 	call	0x20b2	; 0x20b2 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    1c28:	8c e0       	ldi	r24, 0x0C	; 12
    1c2a:	0e 94 59 10 	call	0x20b2	; 0x20b2 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	0e 94 59 10 	call	0x20b2	; 0x20b2 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0e 94 59 10 	call	0x20b2	; 0x20b2 <H_Lcd_Void_LCDWriteCommand>


#endif
}
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	e9 97       	sbiw	r28, 0x39	; 57
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    1c56:	8d e0       	ldi	r24, 0x0D	; 13
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    1c5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c60:	82 95       	swap	r24
    1c62:	8f 70       	andi	r24, 0x0F	; 15
    1c64:	98 2f       	mov	r25, r24
    1c66:	91 70       	andi	r25, 0x01	; 1
    1c68:	84 e1       	ldi	r24, 0x14	; 20
    1c6a:	69 2f       	mov	r22, r25
    1c6c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    1c70:	89 ad       	ldd	r24, Y+57	; 0x39
    1c72:	82 95       	swap	r24
    1c74:	86 95       	lsr	r24
    1c76:	87 70       	andi	r24, 0x07	; 7
    1c78:	98 2f       	mov	r25, r24
    1c7a:	91 70       	andi	r25, 0x01	; 1
    1c7c:	85 e1       	ldi	r24, 0x15	; 21
    1c7e:	69 2f       	mov	r22, r25
    1c80:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    1c84:	89 ad       	ldd	r24, Y+57	; 0x39
    1c86:	82 95       	swap	r24
    1c88:	86 95       	lsr	r24
    1c8a:	86 95       	lsr	r24
    1c8c:	83 70       	andi	r24, 0x03	; 3
    1c8e:	98 2f       	mov	r25, r24
    1c90:	91 70       	andi	r25, 0x01	; 1
    1c92:	86 e1       	ldi	r24, 0x16	; 22
    1c94:	69 2f       	mov	r22, r25
    1c96:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    1c9a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c9c:	98 2f       	mov	r25, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	99 27       	eor	r25, r25
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	88 e1       	ldi	r24, 0x18	; 24
    1ca6:	69 2f       	mov	r22, r25
    1ca8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1cac:	8c e0       	ldi	r24, 0x0C	; 12
    1cae:	61 e0       	ldi	r22, 0x01	; 1
    1cb0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e8       	ldi	r26, 0x80	; 128
    1cba:	bf e3       	ldi	r27, 0x3F	; 63
    1cbc:	8d ab       	std	Y+53, r24	; 0x35
    1cbe:	9e ab       	std	Y+54, r25	; 0x36
    1cc0:	af ab       	std	Y+55, r26	; 0x37
    1cc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cca:	98 ad       	ldd	r25, Y+56	; 0x38
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a e7       	ldi	r20, 0x7A	; 122
    1cd2:	55 e4       	ldi	r21, 0x45	; 69
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	89 ab       	std	Y+49, r24	; 0x31
    1cde:	9a ab       	std	Y+50, r25	; 0x32
    1ce0:	ab ab       	std	Y+51, r26	; 0x33
    1ce2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ce4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cea:	9c a9       	ldd	r25, Y+52	; 0x34
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	2c f4       	brge	.+10     	; 0x1d06 <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	98 ab       	std	Y+48, r25	; 0x30
    1d02:	8f a7       	std	Y+47, r24	; 0x2f
    1d04:	3f c0       	rjmp	.+126    	; 0x1d84 <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    1d06:	69 a9       	ldd	r22, Y+49	; 0x31
    1d08:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	57 e4       	ldi	r21, 0x47	; 71
    1d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	4c f5       	brge	.+82     	; 0x1d70 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d20:	7e a9       	ldd	r23, Y+54	; 0x36
    1d22:	8f a9       	ldd	r24, Y+55	; 0x37
    1d24:	98 ad       	ldd	r25, Y+56	; 0x38
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e2       	ldi	r20, 0x20	; 32
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	98 ab       	std	Y+48, r25	; 0x30
    1d44:	8f a7       	std	Y+47, r24	; 0x2f
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <H_Lcd_Void_LCDWriteCharacter+0x126>
    1d48:	80 e9       	ldi	r24, 0x90	; 144
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	9e a7       	std	Y+46, r25	; 0x2e
    1d4e:	8d a7       	std	Y+45, r24	; 0x2d
    1d50:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d52:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <H_Lcd_Void_LCDWriteCharacter+0x114>
    1d58:	9e a7       	std	Y+46, r25	; 0x2e
    1d5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	98 ab       	std	Y+48, r25	; 0x30
    1d64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d68:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	69 f7       	brne	.-38     	; 0x1d48 <H_Lcd_Void_LCDWriteCharacter+0x108>
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	69 a9       	ldd	r22, Y+49	; 0x31
    1d72:	7a a9       	ldd	r23, Y+50	; 0x32
    1d74:	8b a9       	ldd	r24, Y+51	; 0x33
    1d76:	9c a9       	ldd	r25, Y+52	; 0x34
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	98 ab       	std	Y+48, r25	; 0x30
    1d82:	8f a7       	std	Y+47, r24	; 0x2f
    1d84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d86:	98 a9       	ldd	r25, Y+48	; 0x30
    1d88:	9c a7       	std	Y+44, r25	; 0x2c
    1d8a:	8b a7       	std	Y+43, r24	; 0x2b
    1d8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <H_Lcd_Void_LCDWriteCharacter+0x150>
    1d94:	9c a7       	std	Y+44, r25	; 0x2c
    1d96:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1d98:	8c e0       	ldi	r24, 0x0C	; 12
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e8       	ldi	r26, 0x80	; 128
    1da6:	bf e3       	ldi	r27, 0x3F	; 63
    1da8:	8f a3       	std	Y+39, r24	; 0x27
    1daa:	98 a7       	std	Y+40, r25	; 0x28
    1dac:	a9 a7       	std	Y+41, r26	; 0x29
    1dae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	6f a1       	ldd	r22, Y+39	; 0x27
    1db2:	78 a5       	ldd	r23, Y+40	; 0x28
    1db4:	89 a5       	ldd	r24, Y+41	; 0x29
    1db6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a e7       	ldi	r20, 0x7A	; 122
    1dbe:	55 e4       	ldi	r21, 0x45	; 69
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8b a3       	std	Y+35, r24	; 0x23
    1dca:	9c a3       	std	Y+36, r25	; 0x24
    1dcc:	ad a3       	std	Y+37, r26	; 0x25
    1dce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9a a3       	std	Y+34, r25	; 0x22
    1dee:	89 a3       	std	Y+33, r24	; 0x21
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    1df2:	6b a1       	ldd	r22, Y+35	; 0x23
    1df4:	7c a1       	ldd	r23, Y+36	; 0x24
    1df6:	8d a1       	ldd	r24, Y+37	; 0x25
    1df8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9a a3       	std	Y+34, r25	; 0x22
    1e30:	89 a3       	std	Y+33, r24	; 0x21
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <H_Lcd_Void_LCDWriteCharacter+0x212>
    1e34:	80 e9       	ldi	r24, 0x90	; 144
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	98 a3       	std	Y+32, r25	; 0x20
    1e3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <H_Lcd_Void_LCDWriteCharacter+0x200>
    1e44:	98 a3       	std	Y+32, r25	; 0x20
    1e46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9a a3       	std	Y+34, r25	; 0x22
    1e50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	89 a1       	ldd	r24, Y+33	; 0x21
    1e54:	9a a1       	ldd	r25, Y+34	; 0x22
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e60:	8d a1       	ldd	r24, Y+37	; 0x25
    1e62:	9e a1       	ldd	r25, Y+38	; 0x26
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9a a3       	std	Y+34, r25	; 0x22
    1e6e:	89 a3       	std	Y+33, r24	; 0x21
    1e70:	89 a1       	ldd	r24, Y+33	; 0x21
    1e72:	9a a1       	ldd	r25, Y+34	; 0x22
    1e74:	9e 8f       	std	Y+30, r25	; 0x1e
    1e76:	8d 8f       	std	Y+29, r24	; 0x1d
    1e78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <H_Lcd_Void_LCDWriteCharacter+0x23c>
    1e80:	9e 8f       	std	Y+30, r25	; 0x1e
    1e82:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    1e84:	89 ad       	ldd	r24, Y+57	; 0x39
    1e86:	98 2f       	mov	r25, r24
    1e88:	91 70       	andi	r25, 0x01	; 1
    1e8a:	84 e1       	ldi	r24, 0x14	; 20
    1e8c:	69 2f       	mov	r22, r25
    1e8e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    1e92:	89 ad       	ldd	r24, Y+57	; 0x39
    1e94:	86 95       	lsr	r24
    1e96:	98 2f       	mov	r25, r24
    1e98:	91 70       	andi	r25, 0x01	; 1
    1e9a:	85 e1       	ldi	r24, 0x15	; 21
    1e9c:	69 2f       	mov	r22, r25
    1e9e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    1ea2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ea4:	86 95       	lsr	r24
    1ea6:	86 95       	lsr	r24
    1ea8:	98 2f       	mov	r25, r24
    1eaa:	91 70       	andi	r25, 0x01	; 1
    1eac:	86 e1       	ldi	r24, 0x16	; 22
    1eae:	69 2f       	mov	r22, r25
    1eb0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    1eb4:	89 ad       	ldd	r24, Y+57	; 0x39
    1eb6:	86 95       	lsr	r24
    1eb8:	86 95       	lsr	r24
    1eba:	86 95       	lsr	r24
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	91 70       	andi	r25, 0x01	; 1
    1ec0:	88 e1       	ldi	r24, 0x18	; 24
    1ec2:	69 2f       	mov	r22, r25
    1ec4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1ec8:	8c e0       	ldi	r24, 0x0C	; 12
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a0 e8       	ldi	r26, 0x80	; 128
    1ed6:	bf e3       	ldi	r27, 0x3F	; 63
    1ed8:	89 8f       	std	Y+25, r24	; 0x19
    1eda:	9a 8f       	std	Y+26, r25	; 0x1a
    1edc:	ab 8f       	std	Y+27, r26	; 0x1b
    1ede:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4a e7       	ldi	r20, 0x7A	; 122
    1eee:	55 e4       	ldi	r21, 0x45	; 69
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	8d 8b       	std	Y+21, r24	; 0x15
    1efa:	9e 8b       	std	Y+22, r25	; 0x16
    1efc:	af 8b       	std	Y+23, r26	; 0x17
    1efe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f00:	6d 89       	ldd	r22, Y+21	; 0x15
    1f02:	7e 89       	ldd	r23, Y+22	; 0x16
    1f04:	8f 89       	ldd	r24, Y+23	; 0x17
    1f06:	98 8d       	ldd	r25, Y+24	; 0x18
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e8       	ldi	r20, 0x80	; 128
    1f0e:	5f e3       	ldi	r21, 0x3F	; 63
    1f10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f14:	88 23       	and	r24, r24
    1f16:	2c f4       	brge	.+10     	; 0x1f22 <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9c 8b       	std	Y+20, r25	; 0x14
    1f1e:	8b 8b       	std	Y+19, r24	; 0x13
    1f20:	3f c0       	rjmp	.+126    	; 0x1fa0 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    1f22:	6d 89       	ldd	r22, Y+21	; 0x15
    1f24:	7e 89       	ldd	r23, Y+22	; 0x16
    1f26:	8f 89       	ldd	r24, Y+23	; 0x17
    1f28:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	3f ef       	ldi	r19, 0xFF	; 255
    1f2e:	4f e7       	ldi	r20, 0x7F	; 127
    1f30:	57 e4       	ldi	r21, 0x47	; 71
    1f32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f36:	18 16       	cp	r1, r24
    1f38:	4c f5       	brge	.+82     	; 0x1f8c <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e2       	ldi	r20, 0x20	; 32
    1f48:	51 e4       	ldi	r21, 0x41	; 65
    1f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9c 8b       	std	Y+20, r25	; 0x14
    1f60:	8b 8b       	std	Y+19, r24	; 0x13
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <H_Lcd_Void_LCDWriteCharacter+0x342>
    1f64:	80 e9       	ldi	r24, 0x90	; 144
    1f66:	91 e0       	ldi	r25, 0x01	; 1
    1f68:	9a 8b       	std	Y+18, r25	; 0x12
    1f6a:	89 8b       	std	Y+17, r24	; 0x11
    1f6c:	89 89       	ldd	r24, Y+17	; 0x11
    1f6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <H_Lcd_Void_LCDWriteCharacter+0x330>
    1f74:	9a 8b       	std	Y+18, r25	; 0x12
    1f76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f78:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	9c 8b       	std	Y+20, r25	; 0x14
    1f80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f82:	8b 89       	ldd	r24, Y+19	; 0x13
    1f84:	9c 89       	ldd	r25, Y+20	; 0x14
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	69 f7       	brne	.-38     	; 0x1f64 <H_Lcd_Void_LCDWriteCharacter+0x324>
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f90:	8f 89       	ldd	r24, Y+23	; 0x17
    1f92:	98 8d       	ldd	r25, Y+24	; 0x18
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	9c 8b       	std	Y+20, r25	; 0x14
    1f9e:	8b 8b       	std	Y+19, r24	; 0x13
    1fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa4:	98 8b       	std	Y+16, r25	; 0x10
    1fa6:	8f 87       	std	Y+15, r24	; 0x0f
    1fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1faa:	98 89       	ldd	r25, Y+16	; 0x10
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <H_Lcd_Void_LCDWriteCharacter+0x36c>
    1fb0:	98 8b       	std	Y+16, r25	; 0x10
    1fb2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1fb4:	8c e0       	ldi	r24, 0x0C	; 12
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc2:	b0 e4       	ldi	r27, 0x40	; 64
    1fc4:	8b 87       	std	Y+11, r24	; 0x0b
    1fc6:	9c 87       	std	Y+12, r25	; 0x0c
    1fc8:	ad 87       	std	Y+13, r26	; 0x0d
    1fca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4a e7       	ldi	r20, 0x7A	; 122
    1fda:	55 e4       	ldi	r21, 0x45	; 69
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	8f 83       	std	Y+7, r24	; 0x07
    1fe6:	98 87       	std	Y+8, r25	; 0x08
    1fe8:	a9 87       	std	Y+9, r26	; 0x09
    1fea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fec:	6f 81       	ldd	r22, Y+7	; 0x07
    1fee:	78 85       	ldd	r23, Y+8	; 0x08
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e8       	ldi	r20, 0x80	; 128
    1ffa:	5f e3       	ldi	r21, 0x3F	; 63
    1ffc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2000:	88 23       	and	r24, r24
    2002:	2c f4       	brge	.+10     	; 0x200e <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	3f c0       	rjmp	.+126    	; 0x208c <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    200e:	6f 81       	ldd	r22, Y+7	; 0x07
    2010:	78 85       	ldd	r23, Y+8	; 0x08
    2012:	89 85       	ldd	r24, Y+9	; 0x09
    2014:	9a 85       	ldd	r25, Y+10	; 0x0a
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	4f e7       	ldi	r20, 0x7F	; 127
    201c:	57 e4       	ldi	r21, 0x47	; 71
    201e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2022:	18 16       	cp	r1, r24
    2024:	4c f5       	brge	.+82     	; 0x2078 <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2026:	6b 85       	ldd	r22, Y+11	; 0x0b
    2028:	7c 85       	ldd	r23, Y+12	; 0x0c
    202a:	8d 85       	ldd	r24, Y+13	; 0x0d
    202c:	9e 85       	ldd	r25, Y+14	; 0x0e
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e2       	ldi	r20, 0x20	; 32
    2034:	51 e4       	ldi	r21, 0x41	; 65
    2036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	0f c0       	rjmp	.+30     	; 0x206e <H_Lcd_Void_LCDWriteCharacter+0x42e>
    2050:	80 e9       	ldi	r24, 0x90	; 144
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	9c 83       	std	Y+4, r25	; 0x04
    2056:	8b 83       	std	Y+3, r24	; 0x03
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <H_Lcd_Void_LCDWriteCharacter+0x41c>
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
    2066:	9e 81       	ldd	r25, Y+6	; 0x06
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	69 f7       	brne	.-38     	; 0x2050 <H_Lcd_Void_LCDWriteCharacter+0x410>
    2076:	14 c0       	rjmp	.+40     	; 0x20a0 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2078:	6f 81       	ldd	r22, Y+7	; 0x07
    207a:	78 85       	ldd	r23, Y+8	; 0x08
    207c:	89 85       	ldd	r24, Y+9	; 0x09
    207e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	9a 83       	std	Y+2, r25	; 0x02
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <H_Lcd_Void_LCDWriteCharacter+0x458>
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    20a0:	e9 96       	adiw	r28, 0x39	; 57
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	e9 97       	sbiw	r28, 0x39	; 57
    20bc:	0f b6       	in	r0, 0x3f	; 63
    20be:	f8 94       	cli
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	cd bf       	out	0x3d, r28	; 61
    20c6:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    20c8:	8d e0       	ldi	r24, 0x0D	; 13
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    20d0:	89 ad       	ldd	r24, Y+57	; 0x39
    20d2:	82 95       	swap	r24
    20d4:	8f 70       	andi	r24, 0x0F	; 15
    20d6:	98 2f       	mov	r25, r24
    20d8:	91 70       	andi	r25, 0x01	; 1
    20da:	84 e1       	ldi	r24, 0x14	; 20
    20dc:	69 2f       	mov	r22, r25
    20de:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    20e2:	89 ad       	ldd	r24, Y+57	; 0x39
    20e4:	82 95       	swap	r24
    20e6:	86 95       	lsr	r24
    20e8:	87 70       	andi	r24, 0x07	; 7
    20ea:	98 2f       	mov	r25, r24
    20ec:	91 70       	andi	r25, 0x01	; 1
    20ee:	85 e1       	ldi	r24, 0x15	; 21
    20f0:	69 2f       	mov	r22, r25
    20f2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    20f6:	89 ad       	ldd	r24, Y+57	; 0x39
    20f8:	82 95       	swap	r24
    20fa:	86 95       	lsr	r24
    20fc:	86 95       	lsr	r24
    20fe:	83 70       	andi	r24, 0x03	; 3
    2100:	98 2f       	mov	r25, r24
    2102:	91 70       	andi	r25, 0x01	; 1
    2104:	86 e1       	ldi	r24, 0x16	; 22
    2106:	69 2f       	mov	r22, r25
    2108:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    210c:	89 ad       	ldd	r24, Y+57	; 0x39
    210e:	98 2f       	mov	r25, r24
    2110:	99 1f       	adc	r25, r25
    2112:	99 27       	eor	r25, r25
    2114:	99 1f       	adc	r25, r25
    2116:	88 e1       	ldi	r24, 0x18	; 24
    2118:	69 2f       	mov	r22, r25
    211a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    211e:	8c e0       	ldi	r24, 0x0C	; 12
    2120:	61 e0       	ldi	r22, 0x01	; 1
    2122:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	a0 e8       	ldi	r26, 0x80	; 128
    212c:	bf e3       	ldi	r27, 0x3F	; 63
    212e:	8d ab       	std	Y+53, r24	; 0x35
    2130:	9e ab       	std	Y+54, r25	; 0x36
    2132:	af ab       	std	Y+55, r26	; 0x37
    2134:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2136:	6d a9       	ldd	r22, Y+53	; 0x35
    2138:	7e a9       	ldd	r23, Y+54	; 0x36
    213a:	8f a9       	ldd	r24, Y+55	; 0x37
    213c:	98 ad       	ldd	r25, Y+56	; 0x38
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4a e7       	ldi	r20, 0x7A	; 122
    2144:	55 e4       	ldi	r21, 0x45	; 69
    2146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	89 ab       	std	Y+49, r24	; 0x31
    2150:	9a ab       	std	Y+50, r25	; 0x32
    2152:	ab ab       	std	Y+51, r26	; 0x33
    2154:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2156:	69 a9       	ldd	r22, Y+49	; 0x31
    2158:	7a a9       	ldd	r23, Y+50	; 0x32
    215a:	8b a9       	ldd	r24, Y+51	; 0x33
    215c:	9c a9       	ldd	r25, Y+52	; 0x34
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 e8       	ldi	r20, 0x80	; 128
    2164:	5f e3       	ldi	r21, 0x3F	; 63
    2166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    216a:	88 23       	and	r24, r24
    216c:	2c f4       	brge	.+10     	; 0x2178 <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	98 ab       	std	Y+48, r25	; 0x30
    2174:	8f a7       	std	Y+47, r24	; 0x2f
    2176:	3f c0       	rjmp	.+126    	; 0x21f6 <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    2178:	69 a9       	ldd	r22, Y+49	; 0x31
    217a:	7a a9       	ldd	r23, Y+50	; 0x32
    217c:	8b a9       	ldd	r24, Y+51	; 0x33
    217e:	9c a9       	ldd	r25, Y+52	; 0x34
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	4c f5       	brge	.+82     	; 0x21e2 <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2190:	6d a9       	ldd	r22, Y+53	; 0x35
    2192:	7e a9       	ldd	r23, Y+54	; 0x36
    2194:	8f a9       	ldd	r24, Y+55	; 0x37
    2196:	98 ad       	ldd	r25, Y+56	; 0x38
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	51 e4       	ldi	r21, 0x41	; 65
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	bc 01       	movw	r22, r24
    21aa:	cd 01       	movw	r24, r26
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	98 ab       	std	Y+48, r25	; 0x30
    21b6:	8f a7       	std	Y+47, r24	; 0x2f
    21b8:	0f c0       	rjmp	.+30     	; 0x21d8 <H_Lcd_Void_LCDWriteCommand+0x126>
    21ba:	80 e9       	ldi	r24, 0x90	; 144
    21bc:	91 e0       	ldi	r25, 0x01	; 1
    21be:	9e a7       	std	Y+46, r25	; 0x2e
    21c0:	8d a7       	std	Y+45, r24	; 0x2d
    21c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <H_Lcd_Void_LCDWriteCommand+0x114>
    21ca:	9e a7       	std	Y+46, r25	; 0x2e
    21cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d0:	98 a9       	ldd	r25, Y+48	; 0x30
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	98 ab       	std	Y+48, r25	; 0x30
    21d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21da:	98 a9       	ldd	r25, Y+48	; 0x30
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	69 f7       	brne	.-38     	; 0x21ba <H_Lcd_Void_LCDWriteCommand+0x108>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	69 a9       	ldd	r22, Y+49	; 0x31
    21e4:	7a a9       	ldd	r23, Y+50	; 0x32
    21e6:	8b a9       	ldd	r24, Y+51	; 0x33
    21e8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	98 ab       	std	Y+48, r25	; 0x30
    21f4:	8f a7       	std	Y+47, r24	; 0x2f
    21f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f8:	98 a9       	ldd	r25, Y+48	; 0x30
    21fa:	9c a7       	std	Y+44, r25	; 0x2c
    21fc:	8b a7       	std	Y+43, r24	; 0x2b
    21fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2200:	9c a5       	ldd	r25, Y+44	; 0x2c
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <H_Lcd_Void_LCDWriteCommand+0x150>
    2206:	9c a7       	std	Y+44, r25	; 0x2c
    2208:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    220a:	8c e0       	ldi	r24, 0x0C	; 12
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a0 e8       	ldi	r26, 0x80	; 128
    2218:	bf e3       	ldi	r27, 0x3F	; 63
    221a:	8f a3       	std	Y+39, r24	; 0x27
    221c:	98 a7       	std	Y+40, r25	; 0x28
    221e:	a9 a7       	std	Y+41, r26	; 0x29
    2220:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	6f a1       	ldd	r22, Y+39	; 0x27
    2224:	78 a5       	ldd	r23, Y+40	; 0x28
    2226:	89 a5       	ldd	r24, Y+41	; 0x29
    2228:	9a a5       	ldd	r25, Y+42	; 0x2a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a e7       	ldi	r20, 0x7A	; 122
    2230:	55 e4       	ldi	r21, 0x45	; 69
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	8b a3       	std	Y+35, r24	; 0x23
    223c:	9c a3       	std	Y+36, r25	; 0x24
    223e:	ad a3       	std	Y+37, r26	; 0x25
    2240:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2242:	6b a1       	ldd	r22, Y+35	; 0x23
    2244:	7c a1       	ldd	r23, Y+36	; 0x24
    2246:	8d a1       	ldd	r24, Y+37	; 0x25
    2248:	9e a1       	ldd	r25, Y+38	; 0x26
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	2c f4       	brge	.+10     	; 0x2264 <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9a a3       	std	Y+34, r25	; 0x22
    2260:	89 a3       	std	Y+33, r24	; 0x21
    2262:	3f c0       	rjmp	.+126    	; 0x22e2 <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    2264:	6b a1       	ldd	r22, Y+35	; 0x23
    2266:	7c a1       	ldd	r23, Y+36	; 0x24
    2268:	8d a1       	ldd	r24, Y+37	; 0x25
    226a:	9e a1       	ldd	r25, Y+38	; 0x26
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	3f ef       	ldi	r19, 0xFF	; 255
    2270:	4f e7       	ldi	r20, 0x7F	; 127
    2272:	57 e4       	ldi	r21, 0x47	; 71
    2274:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2278:	18 16       	cp	r1, r24
    227a:	4c f5       	brge	.+82     	; 0x22ce <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	6f a1       	ldd	r22, Y+39	; 0x27
    227e:	78 a5       	ldd	r23, Y+40	; 0x28
    2280:	89 a5       	ldd	r24, Y+41	; 0x29
    2282:	9a a5       	ldd	r25, Y+42	; 0x2a
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e2       	ldi	r20, 0x20	; 32
    228a:	51 e4       	ldi	r21, 0x41	; 65
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9a a3       	std	Y+34, r25	; 0x22
    22a2:	89 a3       	std	Y+33, r24	; 0x21
    22a4:	0f c0       	rjmp	.+30     	; 0x22c4 <H_Lcd_Void_LCDWriteCommand+0x212>
    22a6:	80 e9       	ldi	r24, 0x90	; 144
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	98 a3       	std	Y+32, r25	; 0x20
    22ac:	8f 8f       	std	Y+31, r24	; 0x1f
    22ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22b0:	98 a1       	ldd	r25, Y+32	; 0x20
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <H_Lcd_Void_LCDWriteCommand+0x200>
    22b6:	98 a3       	std	Y+32, r25	; 0x20
    22b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ba:	89 a1       	ldd	r24, Y+33	; 0x21
    22bc:	9a a1       	ldd	r25, Y+34	; 0x22
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	9a a3       	std	Y+34, r25	; 0x22
    22c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	89 a1       	ldd	r24, Y+33	; 0x21
    22c6:	9a a1       	ldd	r25, Y+34	; 0x22
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	69 f7       	brne	.-38     	; 0x22a6 <H_Lcd_Void_LCDWriteCommand+0x1f4>
    22cc:	14 c0       	rjmp	.+40     	; 0x22f6 <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	6b a1       	ldd	r22, Y+35	; 0x23
    22d0:	7c a1       	ldd	r23, Y+36	; 0x24
    22d2:	8d a1       	ldd	r24, Y+37	; 0x25
    22d4:	9e a1       	ldd	r25, Y+38	; 0x26
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9a a3       	std	Y+34, r25	; 0x22
    22e0:	89 a3       	std	Y+33, r24	; 0x21
    22e2:	89 a1       	ldd	r24, Y+33	; 0x21
    22e4:	9a a1       	ldd	r25, Y+34	; 0x22
    22e6:	9e 8f       	std	Y+30, r25	; 0x1e
    22e8:	8d 8f       	std	Y+29, r24	; 0x1d
    22ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <H_Lcd_Void_LCDWriteCommand+0x23c>
    22f2:	9e 8f       	std	Y+30, r25	; 0x1e
    22f4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    22f6:	89 ad       	ldd	r24, Y+57	; 0x39
    22f8:	98 2f       	mov	r25, r24
    22fa:	91 70       	andi	r25, 0x01	; 1
    22fc:	84 e1       	ldi	r24, 0x14	; 20
    22fe:	69 2f       	mov	r22, r25
    2300:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    2304:	89 ad       	ldd	r24, Y+57	; 0x39
    2306:	86 95       	lsr	r24
    2308:	98 2f       	mov	r25, r24
    230a:	91 70       	andi	r25, 0x01	; 1
    230c:	85 e1       	ldi	r24, 0x15	; 21
    230e:	69 2f       	mov	r22, r25
    2310:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    2314:	89 ad       	ldd	r24, Y+57	; 0x39
    2316:	86 95       	lsr	r24
    2318:	86 95       	lsr	r24
    231a:	98 2f       	mov	r25, r24
    231c:	91 70       	andi	r25, 0x01	; 1
    231e:	86 e1       	ldi	r24, 0x16	; 22
    2320:	69 2f       	mov	r22, r25
    2322:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    2326:	89 ad       	ldd	r24, Y+57	; 0x39
    2328:	86 95       	lsr	r24
    232a:	86 95       	lsr	r24
    232c:	86 95       	lsr	r24
    232e:	98 2f       	mov	r25, r24
    2330:	91 70       	andi	r25, 0x01	; 1
    2332:	88 e1       	ldi	r24, 0x18	; 24
    2334:	69 2f       	mov	r22, r25
    2336:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    233a:	8c e0       	ldi	r24, 0x0C	; 12
    233c:	61 e0       	ldi	r22, 0x01	; 1
    233e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 e8       	ldi	r26, 0x80	; 128
    2348:	bf e3       	ldi	r27, 0x3F	; 63
    234a:	89 8f       	std	Y+25, r24	; 0x19
    234c:	9a 8f       	std	Y+26, r25	; 0x1a
    234e:	ab 8f       	std	Y+27, r26	; 0x1b
    2350:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2352:	69 8d       	ldd	r22, Y+25	; 0x19
    2354:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2356:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2358:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4a e7       	ldi	r20, 0x7A	; 122
    2360:	55 e4       	ldi	r21, 0x45	; 69
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	8d 8b       	std	Y+21, r24	; 0x15
    236c:	9e 8b       	std	Y+22, r25	; 0x16
    236e:	af 8b       	std	Y+23, r26	; 0x17
    2370:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2372:	6d 89       	ldd	r22, Y+21	; 0x15
    2374:	7e 89       	ldd	r23, Y+22	; 0x16
    2376:	8f 89       	ldd	r24, Y+23	; 0x17
    2378:	98 8d       	ldd	r25, Y+24	; 0x18
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e8       	ldi	r20, 0x80	; 128
    2380:	5f e3       	ldi	r21, 0x3F	; 63
    2382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2386:	88 23       	and	r24, r24
    2388:	2c f4       	brge	.+10     	; 0x2394 <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	3f c0       	rjmp	.+126    	; 0x2412 <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    2394:	6d 89       	ldd	r22, Y+21	; 0x15
    2396:	7e 89       	ldd	r23, Y+22	; 0x16
    2398:	8f 89       	ldd	r24, Y+23	; 0x17
    239a:	98 8d       	ldd	r25, Y+24	; 0x18
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	4c f5       	brge	.+82     	; 0x23fe <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ac:	69 8d       	ldd	r22, Y+25	; 0x19
    23ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e2       	ldi	r20, 0x20	; 32
    23ba:	51 e4       	ldi	r21, 0x41	; 65
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9c 8b       	std	Y+20, r25	; 0x14
    23d2:	8b 8b       	std	Y+19, r24	; 0x13
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <H_Lcd_Void_LCDWriteCommand+0x342>
    23d6:	80 e9       	ldi	r24, 0x90	; 144
    23d8:	91 e0       	ldi	r25, 0x01	; 1
    23da:	9a 8b       	std	Y+18, r25	; 0x12
    23dc:	89 8b       	std	Y+17, r24	; 0x11
    23de:	89 89       	ldd	r24, Y+17	; 0x11
    23e0:	9a 89       	ldd	r25, Y+18	; 0x12
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <H_Lcd_Void_LCDWriteCommand+0x330>
    23e6:	9a 8b       	std	Y+18, r25	; 0x12
    23e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ea:	8b 89       	ldd	r24, Y+19	; 0x13
    23ec:	9c 89       	ldd	r25, Y+20	; 0x14
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
    23f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	69 f7       	brne	.-38     	; 0x23d6 <H_Lcd_Void_LCDWriteCommand+0x324>
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2400:	7e 89       	ldd	r23, Y+22	; 0x16
    2402:	8f 89       	ldd	r24, Y+23	; 0x17
    2404:	98 8d       	ldd	r25, Y+24	; 0x18
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
    2412:	8b 89       	ldd	r24, Y+19	; 0x13
    2414:	9c 89       	ldd	r25, Y+20	; 0x14
    2416:	98 8b       	std	Y+16, r25	; 0x10
    2418:	8f 87       	std	Y+15, r24	; 0x0f
    241a:	8f 85       	ldd	r24, Y+15	; 0x0f
    241c:	98 89       	ldd	r25, Y+16	; 0x10
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <H_Lcd_Void_LCDWriteCommand+0x36c>
    2422:	98 8b       	std	Y+16, r25	; 0x10
    2424:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2426:	8c e0       	ldi	r24, 0x0C	; 12
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 ea       	ldi	r26, 0xA0	; 160
    2434:	b0 e4       	ldi	r27, 0x40	; 64
    2436:	8b 87       	std	Y+11, r24	; 0x0b
    2438:	9c 87       	std	Y+12, r25	; 0x0c
    243a:	ad 87       	std	Y+13, r26	; 0x0d
    243c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2440:	7c 85       	ldd	r23, Y+12	; 0x0c
    2442:	8d 85       	ldd	r24, Y+13	; 0x0d
    2444:	9e 85       	ldd	r25, Y+14	; 0x0e
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a e7       	ldi	r20, 0x7A	; 122
    244c:	55 e4       	ldi	r21, 0x45	; 69
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8f 83       	std	Y+7, r24	; 0x07
    2458:	98 87       	std	Y+8, r25	; 0x08
    245a:	a9 87       	std	Y+9, r26	; 0x09
    245c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    245e:	6f 81       	ldd	r22, Y+7	; 0x07
    2460:	78 85       	ldd	r23, Y+8	; 0x08
    2462:	89 85       	ldd	r24, Y+9	; 0x09
    2464:	9a 85       	ldd	r25, Y+10	; 0x0a
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	2c f4       	brge	.+10     	; 0x2480 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	3f c0       	rjmp	.+126    	; 0x24fe <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    2480:	6f 81       	ldd	r22, Y+7	; 0x07
    2482:	78 85       	ldd	r23, Y+8	; 0x08
    2484:	89 85       	ldd	r24, Y+9	; 0x09
    2486:	9a 85       	ldd	r25, Y+10	; 0x0a
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	4c f5       	brge	.+82     	; 0x24ea <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2498:	6b 85       	ldd	r22, Y+11	; 0x0b
    249a:	7c 85       	ldd	r23, Y+12	; 0x0c
    249c:	8d 85       	ldd	r24, Y+13	; 0x0d
    249e:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
    24c0:	0f c0       	rjmp	.+30     	; 0x24e0 <H_Lcd_Void_LCDWriteCommand+0x42e>
    24c2:	80 e9       	ldi	r24, 0x90	; 144
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	9c 83       	std	Y+4, r25	; 0x04
    24c8:	8b 83       	std	Y+3, r24	; 0x03
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <H_Lcd_Void_LCDWriteCommand+0x41c>
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	69 f7       	brne	.-38     	; 0x24c2 <H_Lcd_Void_LCDWriteCommand+0x410>
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	6f 81       	ldd	r22, Y+7	; 0x07
    24ec:	78 85       	ldd	r23, Y+8	; 0x08
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9e 83       	std	Y+6, r25	; 0x06
    24fc:	8d 83       	std	Y+5, r24	; 0x05
    24fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2500:	9e 81       	ldd	r25, Y+6	; 0x06
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <H_Lcd_Void_LCDWriteCommand+0x458>
    250e:	9a 83       	std	Y+2, r25	; 0x02
    2510:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2512:	e9 96       	adiw	r28, 0x39	; 57
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <H_Lcd_Void_LCDWriteString+0x6>
    252a:	0f 92       	push	r0
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	9b 83       	std	Y+3, r25	; 0x03
    2532:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    2534:	19 82       	std	Y+1, r1	; 0x01
    2536:	0e c0       	rjmp	.+28     	; 0x2554 <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	9b 81       	ldd	r25, Y+3	; 0x03
    2542:	fc 01       	movw	r30, r24
    2544:	e2 0f       	add	r30, r18
    2546:	f3 1f       	adc	r31, r19
    2548:	80 81       	ld	r24, Z
    254a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	8f 5f       	subi	r24, 0xFF	; 255
    2552:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	fc 01       	movw	r30, r24
    2560:	e2 0f       	add	r30, r18
    2562:	f3 1f       	adc	r31, r19
    2564:	80 81       	ld	r24, Z
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	29 f7       	brne	.-54     	; 0x2538 <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	0e 94 59 10 	call	0x20b2	; 0x20b2 <H_Lcd_Void_LCDWriteCommand>
}
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	2f 97       	sbiw	r28, 0x0f	; 15
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	6c 87       	std	Y+12, r22	; 0x0c
    25a8:	7d 87       	std	Y+13, r23	; 0x0d
    25aa:	8e 87       	std	Y+14, r24	; 0x0e
    25ac:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    25ae:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    25b0:	8a e0       	ldi	r24, 0x0A	; 10
    25b2:	fe 01       	movw	r30, r28
    25b4:	32 96       	adiw	r30, 0x02	; 2
    25b6:	df 01       	movw	r26, r30
    25b8:	98 2f       	mov	r25, r24
    25ba:	1d 92       	st	X+, r1
    25bc:	9a 95       	dec	r25
    25be:	e9 f7       	brne	.-6      	; 0x25ba <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    25c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    25c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    25c4:	ae 85       	ldd	r26, Y+14	; 0x0e
    25c6:	bf 85       	ldd	r27, Y+15	; 0x0f
    25c8:	bb 23       	and	r27, r27
    25ca:	94 f4       	brge	.+36     	; 0x25f0 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    25cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    25ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    25d0:	ae 85       	ldd	r26, Y+14	; 0x0e
    25d2:	bf 85       	ldd	r27, Y+15	; 0x0f
    25d4:	b0 95       	com	r27
    25d6:	a0 95       	com	r26
    25d8:	90 95       	com	r25
    25da:	81 95       	neg	r24
    25dc:	9f 4f       	sbci	r25, 0xFF	; 255
    25de:	af 4f       	sbci	r26, 0xFF	; 255
    25e0:	bf 4f       	sbci	r27, 0xFF	; 255
    25e2:	8c 87       	std	Y+12, r24	; 0x0c
    25e4:	9d 87       	std	Y+13, r25	; 0x0d
    25e6:	ae 87       	std	Y+14, r26	; 0x0e
    25e8:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    25ea:	8d e2       	ldi	r24, 0x2D	; 45
    25ec:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	08 2f       	mov	r16, r24
    25f4:	11 27       	eor	r17, r17
    25f6:	07 fd       	sbrc	r16, 7
    25f8:	10 95       	com	r17
    25fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    25fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    25fe:	ae 85       	ldd	r26, Y+14	; 0x0e
    2600:	bf 85       	ldd	r27, Y+15	; 0x0f
    2602:	2a e0       	ldi	r18, 0x0A	; 10
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__divmodsi4>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	28 2f       	mov	r18, r24
    2618:	ce 01       	movw	r24, r28
    261a:	02 96       	adiw	r24, 0x02	; 2
    261c:	fc 01       	movw	r30, r24
    261e:	e0 0f       	add	r30, r16
    2620:	f1 1f       	adc	r31, r17
    2622:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    2624:	8c 85       	ldd	r24, Y+12	; 0x0c
    2626:	9d 85       	ldd	r25, Y+13	; 0x0d
    2628:	ae 85       	ldd	r26, Y+14	; 0x0e
    262a:	bf 85       	ldd	r27, Y+15	; 0x0f
    262c:	2a e0       	ldi	r18, 0x0A	; 10
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__divmodsi4>
    263c:	da 01       	movw	r26, r20
    263e:	c9 01       	movw	r24, r18
    2640:	8c 87       	std	Y+12, r24	; 0x0c
    2642:	9d 87       	std	Y+13, r25	; 0x0d
    2644:	ae 87       	std	Y+14, r26	; 0x0e
    2646:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	8f 5f       	subi	r24, 0xFF	; 255
    264c:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    264e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2650:	9d 85       	ldd	r25, Y+13	; 0x0d
    2652:	ae 85       	ldd	r26, Y+14	; 0x0e
    2654:	bf 85       	ldd	r27, Y+15	; 0x0f
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	a1 05       	cpc	r26, r1
    265a:	b1 05       	cpc	r27, r1
    265c:	49 f6       	brne	.-110    	; 0x25f0 <H_Lcd_Void_LCDWriteNumber+0x62>
    265e:	11 c0       	rjmp	.+34     	; 0x2682 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	81 50       	subi	r24, 0x01	; 1
    2664:	89 83       	std	Y+1, r24	; 0x01
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	28 2f       	mov	r18, r24
    266a:	33 27       	eor	r19, r19
    266c:	27 fd       	sbrc	r18, 7
    266e:	30 95       	com	r19
    2670:	ce 01       	movw	r24, r28
    2672:	02 96       	adiw	r24, 0x02	; 2
    2674:	fc 01       	movw	r30, r24
    2676:	e2 0f       	add	r30, r18
    2678:	f3 1f       	adc	r31, r19
    267a:	80 81       	ld	r24, Z
    267c:	80 5d       	subi	r24, 0xD0	; 208
    267e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	18 16       	cp	r1, r24
    2686:	64 f3       	brlt	.-40     	; 0x2660 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    2688:	2f 96       	adiw	r28, 0x0f	; 15
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	08 95       	ret

0000269e <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <H_Lcd_Void_LCDGoTo+0x6>
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <H_Lcd_Void_LCDGoTo+0x8>
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <H_Lcd_Void_LCDGoTo+0xa>
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	8d 83       	std	Y+5, r24	; 0x05
    26ae:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    26b0:	80 e8       	ldi	r24, 0x80	; 128
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	80 ec       	ldi	r24, 0xC0	; 192
    26b6:	8a 83       	std	Y+2, r24	; 0x02
    26b8:	84 e9       	ldi	r24, 0x94	; 148
    26ba:	8b 83       	std	Y+3, r24	; 0x03
    26bc:	84 ed       	ldi	r24, 0xD4	; 212
    26be:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	ce 01       	movw	r24, r28
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	fc 01       	movw	r30, r24
    26cc:	e2 0f       	add	r30, r18
    26ce:	f3 1f       	adc	r31, r19
    26d0:	90 81       	ld	r25, Z
    26d2:	8e 81       	ldd	r24, Y+6	; 0x06
    26d4:	89 0f       	add	r24, r25
    26d6:	0e 94 59 10 	call	0x20b2	; 0x20b2 <H_Lcd_Void_LCDWriteCommand>
}
    26da:	26 96       	adiw	r28, 0x06	; 6
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <H_LED_Void_LedInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <H_LED_Void_LedInit+0x6>
    26f2:	0f 92       	push	r0
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	3b 83       	std	Y+3, r19	; 0x03
    2702:	2a 83       	std	Y+2, r18	; 0x02
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	82 30       	cpi	r24, 0x02	; 2
    270a:	91 05       	cpc	r25, r1
    270c:	d9 f0       	breq	.+54     	; 0x2744 <H_LED_Void_LedInit+0x58>
    270e:	2a 81       	ldd	r18, Y+2	; 0x02
    2710:	3b 81       	ldd	r19, Y+3	; 0x03
    2712:	23 30       	cpi	r18, 0x03	; 3
    2714:	31 05       	cpc	r19, r1
    2716:	34 f4       	brge	.+12     	; 0x2724 <H_LED_Void_LedInit+0x38>
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	9b 81       	ldd	r25, Y+3	; 0x03
    271c:	81 30       	cpi	r24, 0x01	; 1
    271e:	91 05       	cpc	r25, r1
    2720:	61 f0       	breq	.+24     	; 0x273a <H_LED_Void_LedInit+0x4e>
    2722:	1e c0       	rjmp	.+60     	; 0x2760 <H_LED_Void_LedInit+0x74>
    2724:	2a 81       	ldd	r18, Y+2	; 0x02
    2726:	3b 81       	ldd	r19, Y+3	; 0x03
    2728:	23 30       	cpi	r18, 0x03	; 3
    272a:	31 05       	cpc	r19, r1
    272c:	81 f0       	breq	.+32     	; 0x274e <H_LED_Void_LedInit+0x62>
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	9b 81       	ldd	r25, Y+3	; 0x03
    2732:	84 30       	cpi	r24, 0x04	; 4
    2734:	91 05       	cpc	r25, r1
    2736:	81 f0       	breq	.+32     	; 0x2758 <H_LED_Void_LedInit+0x6c>
    2738:	13 c0       	rjmp	.+38     	; 0x2760 <H_LED_Void_LedInit+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
    273a:	80 e1       	ldi	r24, 0x10	; 16
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
    2742:	0e c0       	rjmp	.+28     	; 0x2760 <H_LED_Void_LedInit+0x74>
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    2744:	8f e0       	ldi	r24, 0x0F	; 15
    2746:	61 e0       	ldi	r22, 0x01	; 1
    2748:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
    274c:	09 c0       	rjmp	.+18     	; 0x2760 <H_LED_Void_LedInit+0x74>
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    274e:	8e e0       	ldi	r24, 0x0E	; 14
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
    2756:	04 c0       	rjmp	.+8      	; 0x2760 <H_LED_Void_LedInit+0x74>
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    2758:	8b e1       	ldi	r24, 0x1B	; 27
    275a:	61 e0       	ldi	r22, 0x01	; 1
    275c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
	default:                                                      break;
	}
}
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <H_LED_Void_LedOn>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	00 d0       	rcall	.+0      	; 0x2772 <H_LED_Void_LedOn+0x6>
    2772:	0f 92       	push	r0
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	3b 83       	std	Y+3, r19	; 0x03
    2782:	2a 83       	std	Y+2, r18	; 0x02
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	9b 81       	ldd	r25, Y+3	; 0x03
    2788:	82 30       	cpi	r24, 0x02	; 2
    278a:	91 05       	cpc	r25, r1
    278c:	d9 f0       	breq	.+54     	; 0x27c4 <H_LED_Void_LedOn+0x58>
    278e:	2a 81       	ldd	r18, Y+2	; 0x02
    2790:	3b 81       	ldd	r19, Y+3	; 0x03
    2792:	23 30       	cpi	r18, 0x03	; 3
    2794:	31 05       	cpc	r19, r1
    2796:	34 f4       	brge	.+12     	; 0x27a4 <H_LED_Void_LedOn+0x38>
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	9b 81       	ldd	r25, Y+3	; 0x03
    279c:	81 30       	cpi	r24, 0x01	; 1
    279e:	91 05       	cpc	r25, r1
    27a0:	61 f0       	breq	.+24     	; 0x27ba <H_LED_Void_LedOn+0x4e>
    27a2:	1e c0       	rjmp	.+60     	; 0x27e0 <H_LED_Void_LedOn+0x74>
    27a4:	2a 81       	ldd	r18, Y+2	; 0x02
    27a6:	3b 81       	ldd	r19, Y+3	; 0x03
    27a8:	23 30       	cpi	r18, 0x03	; 3
    27aa:	31 05       	cpc	r19, r1
    27ac:	81 f0       	breq	.+32     	; 0x27ce <H_LED_Void_LedOn+0x62>
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	9b 81       	ldd	r25, Y+3	; 0x03
    27b2:	84 30       	cpi	r24, 0x04	; 4
    27b4:	91 05       	cpc	r25, r1
    27b6:	81 f0       	breq	.+32     	; 0x27d8 <H_LED_Void_LedOn+0x6c>
    27b8:	13 c0       	rjmp	.+38     	; 0x27e0 <H_LED_Void_LedOn+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
    27ba:	80 e1       	ldi	r24, 0x10	; 16
    27bc:	61 e0       	ldi	r22, 0x01	; 1
    27be:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    27c2:	0e c0       	rjmp	.+28     	; 0x27e0 <H_LED_Void_LedOn+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    27c4:	8f e0       	ldi	r24, 0x0F	; 15
    27c6:	61 e0       	ldi	r22, 0x01	; 1
    27c8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    27cc:	09 c0       	rjmp	.+18     	; 0x27e0 <H_LED_Void_LedOn+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    27ce:	8e e0       	ldi	r24, 0x0E	; 14
    27d0:	61 e0       	ldi	r22, 0x01	; 1
    27d2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    27d6:	04 c0       	rjmp	.+8      	; 0x27e0 <H_LED_Void_LedOn+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    27d8:	8b e1       	ldi	r24, 0x1B	; 27
    27da:	61 e0       	ldi	r22, 0x01	; 1
    27dc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	default:                                                break;
	}
}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	08 95       	ret

000027ec <H_LED_Void_LedOff>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	00 d0       	rcall	.+0      	; 0x27f2 <H_LED_Void_LedOff+0x6>
    27f2:	0f 92       	push	r0
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	3b 83       	std	Y+3, r19	; 0x03
    2802:	2a 83       	std	Y+2, r18	; 0x02
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	9b 81       	ldd	r25, Y+3	; 0x03
    2808:	82 30       	cpi	r24, 0x02	; 2
    280a:	91 05       	cpc	r25, r1
    280c:	d9 f0       	breq	.+54     	; 0x2844 <H_LED_Void_LedOff+0x58>
    280e:	2a 81       	ldd	r18, Y+2	; 0x02
    2810:	3b 81       	ldd	r19, Y+3	; 0x03
    2812:	23 30       	cpi	r18, 0x03	; 3
    2814:	31 05       	cpc	r19, r1
    2816:	34 f4       	brge	.+12     	; 0x2824 <H_LED_Void_LedOff+0x38>
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	9b 81       	ldd	r25, Y+3	; 0x03
    281c:	81 30       	cpi	r24, 0x01	; 1
    281e:	91 05       	cpc	r25, r1
    2820:	61 f0       	breq	.+24     	; 0x283a <H_LED_Void_LedOff+0x4e>
    2822:	1e c0       	rjmp	.+60     	; 0x2860 <H_LED_Void_LedOff+0x74>
    2824:	2a 81       	ldd	r18, Y+2	; 0x02
    2826:	3b 81       	ldd	r19, Y+3	; 0x03
    2828:	23 30       	cpi	r18, 0x03	; 3
    282a:	31 05       	cpc	r19, r1
    282c:	81 f0       	breq	.+32     	; 0x284e <H_LED_Void_LedOff+0x62>
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	9b 81       	ldd	r25, Y+3	; 0x03
    2832:	84 30       	cpi	r24, 0x04	; 4
    2834:	91 05       	cpc	r25, r1
    2836:	81 f0       	breq	.+32     	; 0x2858 <H_LED_Void_LedOff+0x6c>
    2838:	13 c0       	rjmp	.+38     	; 0x2860 <H_LED_Void_LedOff+0x74>
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
    283a:	80 e1       	ldi	r24, 0x10	; 16
    283c:	60 e0       	ldi	r22, 0x00	; 0
    283e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    2842:	0e c0       	rjmp	.+28     	; 0x2860 <H_LED_Void_LedOff+0x74>
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    2844:	8f e0       	ldi	r24, 0x0F	; 15
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    284c:	09 c0       	rjmp	.+18     	; 0x2860 <H_LED_Void_LedOff+0x74>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    284e:	8e e0       	ldi	r24, 0x0E	; 14
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    2856:	04 c0       	rjmp	.+8      	; 0x2860 <H_LED_Void_LedOff+0x74>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    2858:	8b e1       	ldi	r24, 0x1B	; 27
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
	default:                                               break;
	}
}
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <H_LED_Void_LedBlink>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedBlink(u8 Copy_U8_Led)
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	eb 97       	sbiw	r28, 0x3b	; 59
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_Led)
    2882:	89 ad       	ldd	r24, Y+57	; 0x39
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	3b af       	std	Y+59, r19	; 0x3b
    288a:	2a af       	std	Y+58, r18	; 0x3a
    288c:	8a ad       	ldd	r24, Y+58	; 0x3a
    288e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2890:	82 30       	cpi	r24, 0x02	; 2
    2892:	91 05       	cpc	r25, r1
    2894:	09 f4       	brne	.+2      	; 0x2898 <H_LED_Void_LedBlink+0x2c>
    2896:	93 c0       	rjmp	.+294    	; 0x29be <H_LED_Void_LedBlink+0x152>
    2898:	2a ad       	ldd	r18, Y+58	; 0x3a
    289a:	3b ad       	ldd	r19, Y+59	; 0x3b
    289c:	23 30       	cpi	r18, 0x03	; 3
    289e:	31 05       	cpc	r19, r1
    28a0:	34 f4       	brge	.+12     	; 0x28ae <H_LED_Void_LedBlink+0x42>
    28a2:	8a ad       	ldd	r24, Y+58	; 0x3a
    28a4:	9b ad       	ldd	r25, Y+59	; 0x3b
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	91 05       	cpc	r25, r1
    28aa:	71 f0       	breq	.+28     	; 0x28c8 <H_LED_Void_LedBlink+0x5c>
    28ac:	f8 c1       	rjmp	.+1008   	; 0x2c9e <H_LED_Void_LedBlink+0x432>
    28ae:	2a ad       	ldd	r18, Y+58	; 0x3a
    28b0:	3b ad       	ldd	r19, Y+59	; 0x3b
    28b2:	23 30       	cpi	r18, 0x03	; 3
    28b4:	31 05       	cpc	r19, r1
    28b6:	09 f4       	brne	.+2      	; 0x28ba <H_LED_Void_LedBlink+0x4e>
    28b8:	fd c0       	rjmp	.+506    	; 0x2ab4 <H_LED_Void_LedBlink+0x248>
    28ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    28bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    28be:	84 30       	cpi	r24, 0x04	; 4
    28c0:	91 05       	cpc	r25, r1
    28c2:	09 f4       	brne	.+2      	; 0x28c6 <H_LED_Void_LedBlink+0x5a>
    28c4:	72 c1       	rjmp	.+740    	; 0x2baa <H_LED_Void_LedBlink+0x33e>
    28c6:	eb c1       	rjmp	.+982    	; 0x2c9e <H_LED_Void_LedBlink+0x432>
	{
	case LED_YEL:
		M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH);
    28c8:	80 e1       	ldi	r24, 0x10	; 16
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a6 e9       	ldi	r26, 0x96	; 150
    28d6:	b3 e4       	ldi	r27, 0x43	; 67
    28d8:	8d ab       	std	Y+53, r24	; 0x35
    28da:	9e ab       	std	Y+54, r25	; 0x36
    28dc:	af ab       	std	Y+55, r26	; 0x37
    28de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e0:	6d a9       	ldd	r22, Y+53	; 0x35
    28e2:	7e a9       	ldd	r23, Y+54	; 0x36
    28e4:	8f a9       	ldd	r24, Y+55	; 0x37
    28e6:	98 ad       	ldd	r25, Y+56	; 0x38
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	4a e7       	ldi	r20, 0x7A	; 122
    28ee:	55 e4       	ldi	r21, 0x45	; 69
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	89 ab       	std	Y+49, r24	; 0x31
    28fa:	9a ab       	std	Y+50, r25	; 0x32
    28fc:	ab ab       	std	Y+51, r26	; 0x33
    28fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2900:	69 a9       	ldd	r22, Y+49	; 0x31
    2902:	7a a9       	ldd	r23, Y+50	; 0x32
    2904:	8b a9       	ldd	r24, Y+51	; 0x33
    2906:	9c a9       	ldd	r25, Y+52	; 0x34
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e8       	ldi	r20, 0x80	; 128
    290e:	5f e3       	ldi	r21, 0x3F	; 63
    2910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2914:	88 23       	and	r24, r24
    2916:	2c f4       	brge	.+10     	; 0x2922 <H_LED_Void_LedBlink+0xb6>
		__ticks = 1;
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	98 ab       	std	Y+48, r25	; 0x30
    291e:	8f a7       	std	Y+47, r24	; 0x2f
    2920:	3f c0       	rjmp	.+126    	; 0x29a0 <H_LED_Void_LedBlink+0x134>
	else if (__tmp > 65535)
    2922:	69 a9       	ldd	r22, Y+49	; 0x31
    2924:	7a a9       	ldd	r23, Y+50	; 0x32
    2926:	8b a9       	ldd	r24, Y+51	; 0x33
    2928:	9c a9       	ldd	r25, Y+52	; 0x34
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	3f ef       	ldi	r19, 0xFF	; 255
    292e:	4f e7       	ldi	r20, 0x7F	; 127
    2930:	57 e4       	ldi	r21, 0x47	; 71
    2932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2936:	18 16       	cp	r1, r24
    2938:	4c f5       	brge	.+82     	; 0x298c <H_LED_Void_LedBlink+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293a:	6d a9       	ldd	r22, Y+53	; 0x35
    293c:	7e a9       	ldd	r23, Y+54	; 0x36
    293e:	8f a9       	ldd	r24, Y+55	; 0x37
    2940:	98 ad       	ldd	r25, Y+56	; 0x38
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e2       	ldi	r20, 0x20	; 32
    2948:	51 e4       	ldi	r21, 0x41	; 65
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	98 ab       	std	Y+48, r25	; 0x30
    2960:	8f a7       	std	Y+47, r24	; 0x2f
    2962:	0f c0       	rjmp	.+30     	; 0x2982 <H_LED_Void_LedBlink+0x116>
    2964:	80 e9       	ldi	r24, 0x90	; 144
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	9e a7       	std	Y+46, r25	; 0x2e
    296a:	8d a7       	std	Y+45, r24	; 0x2d
    296c:	8d a5       	ldd	r24, Y+45	; 0x2d
    296e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	f1 f7       	brne	.-4      	; 0x2970 <H_LED_Void_LedBlink+0x104>
    2974:	9e a7       	std	Y+46, r25	; 0x2e
    2976:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2978:	8f a5       	ldd	r24, Y+47	; 0x2f
    297a:	98 a9       	ldd	r25, Y+48	; 0x30
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	98 ab       	std	Y+48, r25	; 0x30
    2980:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2982:	8f a5       	ldd	r24, Y+47	; 0x2f
    2984:	98 a9       	ldd	r25, Y+48	; 0x30
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	69 f7       	brne	.-38     	; 0x2964 <H_LED_Void_LedBlink+0xf8>
    298a:	14 c0       	rjmp	.+40     	; 0x29b4 <H_LED_Void_LedBlink+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298c:	69 a9       	ldd	r22, Y+49	; 0x31
    298e:	7a a9       	ldd	r23, Y+50	; 0x32
    2990:	8b a9       	ldd	r24, Y+51	; 0x33
    2992:	9c a9       	ldd	r25, Y+52	; 0x34
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	98 ab       	std	Y+48, r25	; 0x30
    299e:	8f a7       	std	Y+47, r24	; 0x2f
    29a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a2:	98 a9       	ldd	r25, Y+48	; 0x30
    29a4:	9c a7       	std	Y+44, r25	; 0x2c
    29a6:	8b a7       	std	Y+43, r24	; 0x2b
    29a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    29aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <H_LED_Void_LedBlink+0x140>
    29b0:	9c a7       	std	Y+44, r25	; 0x2c
    29b2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW);
    29b4:	80 e1       	ldi	r24, 0x10	; 16
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    29bc:	70 c1       	rjmp	.+736    	; 0x2c9e <H_LED_Void_LedBlink+0x432>
		break;
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    29be:	8f e0       	ldi	r24, 0x0F	; 15
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a6 e9       	ldi	r26, 0x96	; 150
    29cc:	b3 e4       	ldi	r27, 0x43	; 67
    29ce:	8f a3       	std	Y+39, r24	; 0x27
    29d0:	98 a7       	std	Y+40, r25	; 0x28
    29d2:	a9 a7       	std	Y+41, r26	; 0x29
    29d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	6f a1       	ldd	r22, Y+39	; 0x27
    29d8:	78 a5       	ldd	r23, Y+40	; 0x28
    29da:	89 a5       	ldd	r24, Y+41	; 0x29
    29dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a e7       	ldi	r20, 0x7A	; 122
    29e4:	55 e4       	ldi	r21, 0x45	; 69
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	8b a3       	std	Y+35, r24	; 0x23
    29f0:	9c a3       	std	Y+36, r25	; 0x24
    29f2:	ad a3       	std	Y+37, r26	; 0x25
    29f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29f6:	6b a1       	ldd	r22, Y+35	; 0x23
    29f8:	7c a1       	ldd	r23, Y+36	; 0x24
    29fa:	8d a1       	ldd	r24, Y+37	; 0x25
    29fc:	9e a1       	ldd	r25, Y+38	; 0x26
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a0a:	88 23       	and	r24, r24
    2a0c:	2c f4       	brge	.+10     	; 0x2a18 <H_LED_Void_LedBlink+0x1ac>
		__ticks = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9a a3       	std	Y+34, r25	; 0x22
    2a14:	89 a3       	std	Y+33, r24	; 0x21
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <H_LED_Void_LedBlink+0x22a>
	else if (__tmp > 65535)
    2a18:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	4f e7       	ldi	r20, 0x7F	; 127
    2a26:	57 e4       	ldi	r21, 0x47	; 71
    2a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	4c f5       	brge	.+82     	; 0x2a82 <H_LED_Void_LedBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	6f a1       	ldd	r22, Y+39	; 0x27
    2a32:	78 a5       	ldd	r23, Y+40	; 0x28
    2a34:	89 a5       	ldd	r24, Y+41	; 0x29
    2a36:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9a a3       	std	Y+34, r25	; 0x22
    2a56:	89 a3       	std	Y+33, r24	; 0x21
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <H_LED_Void_LedBlink+0x20c>
    2a5a:	80 e9       	ldi	r24, 0x90	; 144
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	98 a3       	std	Y+32, r25	; 0x20
    2a60:	8f 8f       	std	Y+31, r24	; 0x1f
    2a62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a64:	98 a1       	ldd	r25, Y+32	; 0x20
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <H_LED_Void_LedBlink+0x1fa>
    2a6a:	98 a3       	std	Y+32, r25	; 0x20
    2a6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a70:	9a a1       	ldd	r25, Y+34	; 0x22
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	9a a3       	std	Y+34, r25	; 0x22
    2a76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <H_LED_Void_LedBlink+0x1ee>
    2a80:	14 c0       	rjmp	.+40     	; 0x2aaa <H_LED_Void_LedBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	6b a1       	ldd	r22, Y+35	; 0x23
    2a84:	7c a1       	ldd	r23, Y+36	; 0x24
    2a86:	8d a1       	ldd	r24, Y+37	; 0x25
    2a88:	9e a1       	ldd	r25, Y+38	; 0x26
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9a a3       	std	Y+34, r25	; 0x22
    2a94:	89 a3       	std	Y+33, r24	; 0x21
    2a96:	89 a1       	ldd	r24, Y+33	; 0x21
    2a98:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a9c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <H_LED_Void_LedBlink+0x236>
    2aa6:	9e 8f       	std	Y+30, r25	; 0x1e
    2aa8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    2aaa:	8f e0       	ldi	r24, 0x0F	; 15
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    2ab2:	f5 c0       	rjmp	.+490    	; 0x2c9e <H_LED_Void_LedBlink+0x432>
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    2ab4:	8e e0       	ldi	r24, 0x0E	; 14
    2ab6:	61 e0       	ldi	r22, 0x01	; 1
    2ab8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	a6 e9       	ldi	r26, 0x96	; 150
    2ac2:	b3 e4       	ldi	r27, 0x43	; 67
    2ac4:	89 8f       	std	Y+25, r24	; 0x19
    2ac6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ac8:	ab 8f       	std	Y+27, r26	; 0x1b
    2aca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2acc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ace:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ad2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	4a e7       	ldi	r20, 0x7A	; 122
    2ada:	55 e4       	ldi	r21, 0x45	; 69
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8d 8b       	std	Y+21, r24	; 0x15
    2ae6:	9e 8b       	std	Y+22, r25	; 0x16
    2ae8:	af 8b       	std	Y+23, r26	; 0x17
    2aea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aec:	6d 89       	ldd	r22, Y+21	; 0x15
    2aee:	7e 89       	ldd	r23, Y+22	; 0x16
    2af0:	8f 89       	ldd	r24, Y+23	; 0x17
    2af2:	98 8d       	ldd	r25, Y+24	; 0x18
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e8       	ldi	r20, 0x80	; 128
    2afa:	5f e3       	ldi	r21, 0x3F	; 63
    2afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b00:	88 23       	and	r24, r24
    2b02:	2c f4       	brge	.+10     	; 0x2b0e <H_LED_Void_LedBlink+0x2a2>
		__ticks = 1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
    2b0c:	3f c0       	rjmp	.+126    	; 0x2b8c <H_LED_Void_LedBlink+0x320>
	else if (__tmp > 65535)
    2b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b10:	7e 89       	ldd	r23, Y+22	; 0x16
    2b12:	8f 89       	ldd	r24, Y+23	; 0x17
    2b14:	98 8d       	ldd	r25, Y+24	; 0x18
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	3f ef       	ldi	r19, 0xFF	; 255
    2b1a:	4f e7       	ldi	r20, 0x7F	; 127
    2b1c:	57 e4       	ldi	r21, 0x47	; 71
    2b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b22:	18 16       	cp	r1, r24
    2b24:	4c f5       	brge	.+82     	; 0x2b78 <H_LED_Void_LedBlink+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b26:	69 8d       	ldd	r22, Y+25	; 0x19
    2b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	40 e2       	ldi	r20, 0x20	; 32
    2b34:	51 e4       	ldi	r21, 0x41	; 65
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	bc 01       	movw	r22, r24
    2b40:	cd 01       	movw	r24, r26
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9c 8b       	std	Y+20, r25	; 0x14
    2b4c:	8b 8b       	std	Y+19, r24	; 0x13
    2b4e:	0f c0       	rjmp	.+30     	; 0x2b6e <H_LED_Void_LedBlink+0x302>
    2b50:	80 e9       	ldi	r24, 0x90	; 144
    2b52:	91 e0       	ldi	r25, 0x01	; 1
    2b54:	9a 8b       	std	Y+18, r25	; 0x12
    2b56:	89 8b       	std	Y+17, r24	; 0x11
    2b58:	89 89       	ldd	r24, Y+17	; 0x11
    2b5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <H_LED_Void_LedBlink+0x2f0>
    2b60:	9a 8b       	std	Y+18, r25	; 0x12
    2b62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b64:	8b 89       	ldd	r24, Y+19	; 0x13
    2b66:	9c 89       	ldd	r25, Y+20	; 0x14
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	9c 8b       	std	Y+20, r25	; 0x14
    2b6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b70:	9c 89       	ldd	r25, Y+20	; 0x14
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	69 f7       	brne	.-38     	; 0x2b50 <H_LED_Void_LedBlink+0x2e4>
    2b76:	14 c0       	rjmp	.+40     	; 0x2ba0 <H_LED_Void_LedBlink+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b78:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9c 8b       	std	Y+20, r25	; 0x14
    2b8a:	8b 8b       	std	Y+19, r24	; 0x13
    2b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b90:	98 8b       	std	Y+16, r25	; 0x10
    2b92:	8f 87       	std	Y+15, r24	; 0x0f
    2b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b96:	98 89       	ldd	r25, Y+16	; 0x10
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <H_LED_Void_LedBlink+0x32c>
    2b9c:	98 8b       	std	Y+16, r25	; 0x10
    2b9e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    2ba0:	8e e0       	ldi	r24, 0x0E	; 14
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    2ba8:	7a c0       	rjmp	.+244    	; 0x2c9e <H_LED_Void_LedBlink+0x432>
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    2baa:	8b e1       	ldi	r24, 0x1B	; 27
    2bac:	61 e0       	ldi	r22, 0x01	; 1
    2bae:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	a6 e9       	ldi	r26, 0x96	; 150
    2bb8:	b3 e4       	ldi	r27, 0x43	; 67
    2bba:	8b 87       	std	Y+11, r24	; 0x0b
    2bbc:	9c 87       	std	Y+12, r25	; 0x0c
    2bbe:	ad 87       	std	Y+13, r26	; 0x0d
    2bc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4a e7       	ldi	r20, 0x7A	; 122
    2bd0:	55 e4       	ldi	r21, 0x45	; 69
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	8f 83       	std	Y+7, r24	; 0x07
    2bdc:	98 87       	std	Y+8, r25	; 0x08
    2bde:	a9 87       	std	Y+9, r26	; 0x09
    2be0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2be2:	6f 81       	ldd	r22, Y+7	; 0x07
    2be4:	78 85       	ldd	r23, Y+8	; 0x08
    2be6:	89 85       	ldd	r24, Y+9	; 0x09
    2be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e8       	ldi	r20, 0x80	; 128
    2bf0:	5f e3       	ldi	r21, 0x3F	; 63
    2bf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf6:	88 23       	and	r24, r24
    2bf8:	2c f4       	brge	.+10     	; 0x2c04 <H_LED_Void_LedBlink+0x398>
		__ticks = 1;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9e 83       	std	Y+6, r25	; 0x06
    2c00:	8d 83       	std	Y+5, r24	; 0x05
    2c02:	3f c0       	rjmp	.+126    	; 0x2c82 <H_LED_Void_LedBlink+0x416>
	else if (__tmp > 65535)
    2c04:	6f 81       	ldd	r22, Y+7	; 0x07
    2c06:	78 85       	ldd	r23, Y+8	; 0x08
    2c08:	89 85       	ldd	r24, Y+9	; 0x09
    2c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	4c f5       	brge	.+82     	; 0x2c6e <H_LED_Void_LedBlink+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e2       	ldi	r20, 0x20	; 32
    2c2a:	51 e4       	ldi	r21, 0x41	; 65
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	0f c0       	rjmp	.+30     	; 0x2c64 <H_LED_Void_LedBlink+0x3f8>
    2c46:	80 e9       	ldi	r24, 0x90	; 144
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	9c 83       	std	Y+4, r25	; 0x04
    2c4c:	8b 83       	std	Y+3, r24	; 0x03
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	9c 81       	ldd	r25, Y+4	; 0x04
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <H_LED_Void_LedBlink+0x3e6>
    2c56:	9c 83       	std	Y+4, r25	; 0x04
    2c58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c64:	8d 81       	ldd	r24, Y+5	; 0x05
    2c66:	9e 81       	ldd	r25, Y+6	; 0x06
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	69 f7       	brne	.-38     	; 0x2c46 <H_LED_Void_LedBlink+0x3da>
    2c6c:	14 c0       	rjmp	.+40     	; 0x2c96 <H_LED_Void_LedBlink+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c70:	78 85       	ldd	r23, Y+8	; 0x08
    2c72:	89 85       	ldd	r24, Y+9	; 0x09
    2c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9e 83       	std	Y+6, r25	; 0x06
    2c80:	8d 83       	std	Y+5, r24	; 0x05
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	9a 83       	std	Y+2, r25	; 0x02
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <H_LED_Void_LedBlink+0x422>
    2c92:	9a 83       	std	Y+2, r25	; 0x02
    2c94:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LED_BLINKING_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    2c96:	8b e1       	ldi	r24, 0x1B	; 27
    2c98:	60 e0       	ldi	r22, 0x00	; 0
    2c9a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
		break;
	default:   break;
	}
}
    2c9e:	eb 96       	adiw	r28, 0x3b	; 59
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	08 95       	ret

00002cb0 <H_LED_Void_LedTog>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <H_LED_Void_LedTog+0x6>
    2cb6:	0f 92       	push	r0
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	3b 83       	std	Y+3, r19	; 0x03
    2cc6:	2a 83       	std	Y+2, r18	; 0x02
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	9b 81       	ldd	r25, Y+3	; 0x03
    2ccc:	82 30       	cpi	r24, 0x02	; 2
    2cce:	91 05       	cpc	r25, r1
    2cd0:	d1 f0       	breq	.+52     	; 0x2d06 <H_LED_Void_LedTog+0x56>
    2cd2:	2a 81       	ldd	r18, Y+2	; 0x02
    2cd4:	3b 81       	ldd	r19, Y+3	; 0x03
    2cd6:	23 30       	cpi	r18, 0x03	; 3
    2cd8:	31 05       	cpc	r19, r1
    2cda:	34 f4       	brge	.+12     	; 0x2ce8 <H_LED_Void_LedTog+0x38>
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce0:	81 30       	cpi	r24, 0x01	; 1
    2ce2:	91 05       	cpc	r25, r1
    2ce4:	61 f0       	breq	.+24     	; 0x2cfe <H_LED_Void_LedTog+0x4e>
    2ce6:	1a c0       	rjmp	.+52     	; 0x2d1c <H_LED_Void_LedTog+0x6c>
    2ce8:	2a 81       	ldd	r18, Y+2	; 0x02
    2cea:	3b 81       	ldd	r19, Y+3	; 0x03
    2cec:	23 30       	cpi	r18, 0x03	; 3
    2cee:	31 05       	cpc	r19, r1
    2cf0:	71 f0       	breq	.+28     	; 0x2d0e <H_LED_Void_LedTog+0x5e>
    2cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf6:	84 30       	cpi	r24, 0x04	; 4
    2cf8:	91 05       	cpc	r25, r1
    2cfa:	69 f0       	breq	.+26     	; 0x2d16 <H_LED_Void_LedTog+0x66>
    2cfc:	0f c0       	rjmp	.+30     	; 0x2d1c <H_LED_Void_LedTog+0x6c>
	{
	case LED_YEL: M_DIO_Void_TogPin(LED_YEL_PIN); break;
    2cfe:	80 e1       	ldi	r24, 0x10	; 16
    2d00:	0e 94 17 0b 	call	0x162e	; 0x162e <M_DIO_Void_TogPin>
    2d04:	0b c0       	rjmp	.+22     	; 0x2d1c <H_LED_Void_LedTog+0x6c>
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    2d06:	8f e0       	ldi	r24, 0x0F	; 15
    2d08:	0e 94 17 0b 	call	0x162e	; 0x162e <M_DIO_Void_TogPin>
    2d0c:	07 c0       	rjmp	.+14     	; 0x2d1c <H_LED_Void_LedTog+0x6c>
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    2d0e:	8e e0       	ldi	r24, 0x0E	; 14
    2d10:	0e 94 17 0b 	call	0x162e	; 0x162e <M_DIO_Void_TogPin>
    2d14:	03 c0       	rjmp	.+6      	; 0x2d1c <H_LED_Void_LedTog+0x6c>
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    2d16:	8b e1       	ldi	r24, 0x1B	; 27
    2d18:	0e 94 17 0b 	call	0x162e	; 0x162e <M_DIO_Void_TogPin>
	default:                                      break;
	}
}
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	08 95       	ret

00002d28 <H_PushButton_Void_PushButtonInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_PushButton_Void_PushButtonInit(u8 Copy_U8_PushButton)
{
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <H_PushButton_Void_PushButtonInit+0x6>
    2d2e:	0f 92       	push	r0
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_PushButton)
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	3b 83       	std	Y+3, r19	; 0x03
    2d3e:	2a 83       	std	Y+2, r18	; 0x02
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	9b 81       	ldd	r25, Y+3	; 0x03
    2d44:	81 30       	cpi	r24, 0x01	; 1
    2d46:	91 05       	cpc	r25, r1
    2d48:	d1 f0       	breq	.+52     	; 0x2d7e <H_PushButton_Void_PushButtonInit+0x56>
    2d4a:	2a 81       	ldd	r18, Y+2	; 0x02
    2d4c:	3b 81       	ldd	r19, Y+3	; 0x03
    2d4e:	22 30       	cpi	r18, 0x02	; 2
    2d50:	31 05       	cpc	r19, r1
    2d52:	2c f4       	brge	.+10     	; 0x2d5e <H_PushButton_Void_PushButtonInit+0x36>
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	9b 81       	ldd	r25, Y+3	; 0x03
    2d58:	00 97       	sbiw	r24, 0x00	; 0
    2d5a:	61 f0       	breq	.+24     	; 0x2d74 <H_PushButton_Void_PushButtonInit+0x4c>
    2d5c:	1e c0       	rjmp	.+60     	; 0x2d9a <H_PushButton_Void_PushButtonInit+0x72>
    2d5e:	2a 81       	ldd	r18, Y+2	; 0x02
    2d60:	3b 81       	ldd	r19, Y+3	; 0x03
    2d62:	22 30       	cpi	r18, 0x02	; 2
    2d64:	31 05       	cpc	r19, r1
    2d66:	81 f0       	breq	.+32     	; 0x2d88 <H_PushButton_Void_PushButtonInit+0x60>
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6c:	83 30       	cpi	r24, 0x03	; 3
    2d6e:	91 05       	cpc	r25, r1
    2d70:	81 f0       	breq	.+32     	; 0x2d92 <H_PushButton_Void_PushButtonInit+0x6a>
    2d72:	13 c0       	rjmp	.+38     	; 0x2d9a <H_PushButton_Void_PushButtonInit+0x72>
	{
	case PUSH_BUTTON_0: M_DIO_Void_SetPinDirection(PUSH_BUTTON_0_PIN,INPUT); break;
    2d74:	8f e2       	ldi	r24, 0x2F	; 47
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
    2d7c:	0e c0       	rjmp	.+28     	; 0x2d9a <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_1: M_DIO_Void_SetPinDirection(PUSH_BUTTON_1_PIN,INPUT); break;
    2d7e:	8e e2       	ldi	r24, 0x2E	; 46
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
    2d86:	09 c0       	rjmp	.+18     	; 0x2d9a <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_2: M_DIO_Void_SetPinDirection(PUSH_BUTTON_2_PIN,INPUT); break;
    2d88:	8d e2       	ldi	r24, 0x2D	; 45
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
    2d90:	04 c0       	rjmp	.+8      	; 0x2d9a <H_PushButton_Void_PushButtonInit+0x72>
	case PUSH_BUTTON_3: M_DIO_Void_SetPinDirection(PUSH_BUTTON_3_PIN,INPUT); break;
    2d92:	8b e2       	ldi	r24, 0x2B	; 43
    2d94:	60 e0       	ldi	r22, 0x00	; 0
    2d96:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
	default:                                                                 break;
	}
}
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <H_PushButton_U8_PushButtonRead>:

u8   H_PushButton_U8_PushButtonRead(u8 Copy_U8_PushButton)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	ec 97       	sbiw	r28, 0x3c	; 60
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_U8_Reading = PUSH_BUTTON_RELEASED;
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	89 af       	std	Y+57, r24	; 0x39
	switch(Copy_U8_PushButton)
    2dc0:	8a ad       	ldd	r24, Y+58	; 0x3a
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	3c af       	std	Y+60, r19	; 0x3c
    2dc8:	2b af       	std	Y+59, r18	; 0x3b
    2dca:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dcc:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dce:	81 30       	cpi	r24, 0x01	; 1
    2dd0:	91 05       	cpc	r25, r1
    2dd2:	09 f4       	brne	.+2      	; 0x2dd6 <H_PushButton_U8_PushButtonRead+0x30>
    2dd4:	97 c0       	rjmp	.+302    	; 0x2f04 <H_PushButton_U8_PushButtonRead+0x15e>
    2dd6:	2b ad       	ldd	r18, Y+59	; 0x3b
    2dd8:	3c ad       	ldd	r19, Y+60	; 0x3c
    2dda:	22 30       	cpi	r18, 0x02	; 2
    2ddc:	31 05       	cpc	r19, r1
    2dde:	2c f4       	brge	.+10     	; 0x2dea <H_PushButton_U8_PushButtonRead+0x44>
    2de0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2de2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	71 f0       	breq	.+28     	; 0x2e04 <H_PushButton_U8_PushButtonRead+0x5e>
    2de8:	0b c2       	rjmp	.+1046   	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
    2dea:	2b ad       	ldd	r18, Y+59	; 0x3b
    2dec:	3c ad       	ldd	r19, Y+60	; 0x3c
    2dee:	22 30       	cpi	r18, 0x02	; 2
    2df0:	31 05       	cpc	r19, r1
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <H_PushButton_U8_PushButtonRead+0x50>
    2df4:	07 c1       	rjmp	.+526    	; 0x3004 <H_PushButton_U8_PushButtonRead+0x25e>
    2df6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2df8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dfa:	83 30       	cpi	r24, 0x03	; 3
    2dfc:	91 05       	cpc	r25, r1
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <H_PushButton_U8_PushButtonRead+0x5c>
    2e00:	81 c1       	rjmp	.+770    	; 0x3104 <H_PushButton_U8_PushButtonRead+0x35e>
    2e02:	fe c1       	rjmp	.+1020   	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
	{
	case PUSH_BUTTON_0:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    2e04:	8f e2       	ldi	r24, 0x2F	; 47
    2e06:	0e 94 90 0a 	call	0x1520	; 0x1520 <M_DIO_Void_GetPinValue>
    2e0a:	88 23       	and	r24, r24
    2e0c:	09 f0       	breq	.+2      	; 0x2e10 <H_PushButton_U8_PushButtonRead+0x6a>
    2e0e:	f8 c1       	rjmp	.+1008   	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	a8 e4       	ldi	r26, 0x48	; 72
    2e16:	b2 e4       	ldi	r27, 0x42	; 66
    2e18:	8d ab       	std	Y+53, r24	; 0x35
    2e1a:	9e ab       	std	Y+54, r25	; 0x36
    2e1c:	af ab       	std	Y+55, r26	; 0x37
    2e1e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e20:	6d a9       	ldd	r22, Y+53	; 0x35
    2e22:	7e a9       	ldd	r23, Y+54	; 0x36
    2e24:	8f a9       	ldd	r24, Y+55	; 0x37
    2e26:	98 ad       	ldd	r25, Y+56	; 0x38
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	4a e7       	ldi	r20, 0x7A	; 122
    2e2e:	55 e4       	ldi	r21, 0x45	; 69
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	89 ab       	std	Y+49, r24	; 0x31
    2e3a:	9a ab       	std	Y+50, r25	; 0x32
    2e3c:	ab ab       	std	Y+51, r26	; 0x33
    2e3e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e40:	69 a9       	ldd	r22, Y+49	; 0x31
    2e42:	7a a9       	ldd	r23, Y+50	; 0x32
    2e44:	8b a9       	ldd	r24, Y+51	; 0x33
    2e46:	9c a9       	ldd	r25, Y+52	; 0x34
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e8       	ldi	r20, 0x80	; 128
    2e4e:	5f e3       	ldi	r21, 0x3F	; 63
    2e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e54:	88 23       	and	r24, r24
    2e56:	2c f4       	brge	.+10     	; 0x2e62 <H_PushButton_U8_PushButtonRead+0xbc>
		__ticks = 1;
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	98 ab       	std	Y+48, r25	; 0x30
    2e5e:	8f a7       	std	Y+47, r24	; 0x2f
    2e60:	3f c0       	rjmp	.+126    	; 0x2ee0 <H_PushButton_U8_PushButtonRead+0x13a>
	else if (__tmp > 65535)
    2e62:	69 a9       	ldd	r22, Y+49	; 0x31
    2e64:	7a a9       	ldd	r23, Y+50	; 0x32
    2e66:	8b a9       	ldd	r24, Y+51	; 0x33
    2e68:	9c a9       	ldd	r25, Y+52	; 0x34
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	3f ef       	ldi	r19, 0xFF	; 255
    2e6e:	4f e7       	ldi	r20, 0x7F	; 127
    2e70:	57 e4       	ldi	r21, 0x47	; 71
    2e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e76:	18 16       	cp	r1, r24
    2e78:	4c f5       	brge	.+82     	; 0x2ecc <H_PushButton_U8_PushButtonRead+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7a:	6d a9       	ldd	r22, Y+53	; 0x35
    2e7c:	7e a9       	ldd	r23, Y+54	; 0x36
    2e7e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e80:	98 ad       	ldd	r25, Y+56	; 0x38
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e2       	ldi	r20, 0x20	; 32
    2e88:	51 e4       	ldi	r21, 0x41	; 65
    2e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	98 ab       	std	Y+48, r25	; 0x30
    2ea0:	8f a7       	std	Y+47, r24	; 0x2f
    2ea2:	0f c0       	rjmp	.+30     	; 0x2ec2 <H_PushButton_U8_PushButtonRead+0x11c>
    2ea4:	80 e9       	ldi	r24, 0x90	; 144
    2ea6:	91 e0       	ldi	r25, 0x01	; 1
    2ea8:	9e a7       	std	Y+46, r25	; 0x2e
    2eaa:	8d a7       	std	Y+45, r24	; 0x2d
    2eac:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eae:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	f1 f7       	brne	.-4      	; 0x2eb0 <H_PushButton_U8_PushButtonRead+0x10a>
    2eb4:	9e a7       	std	Y+46, r25	; 0x2e
    2eb6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eba:	98 a9       	ldd	r25, Y+48	; 0x30
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	98 ab       	std	Y+48, r25	; 0x30
    2ec0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	69 f7       	brne	.-38     	; 0x2ea4 <H_PushButton_U8_PushButtonRead+0xfe>
    2eca:	14 c0       	rjmp	.+40     	; 0x2ef4 <H_PushButton_U8_PushButtonRead+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ecc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ece:	7a a9       	ldd	r23, Y+50	; 0x32
    2ed0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ed2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	98 ab       	std	Y+48, r25	; 0x30
    2ede:	8f a7       	std	Y+47, r24	; 0x2f
    2ee0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee4:	9c a7       	std	Y+44, r25	; 0x2c
    2ee6:	8b a7       	std	Y+43, r24	; 0x2b
    2ee8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eea:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <H_PushButton_U8_PushButtonRead+0x146>
    2ef0:	9c a7       	std	Y+44, r25	; 0x2c
    2ef2:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED)
    2ef4:	8f e2       	ldi	r24, 0x2F	; 47
    2ef6:	0e 94 90 0a 	call	0x1520	; 0x1520 <M_DIO_Void_GetPinValue>
    2efa:	88 23       	and	r24, r24
    2efc:	09 f0       	breq	.+2      	; 0x2f00 <H_PushButton_U8_PushButtonRead+0x15a>
    2efe:	80 c1       	rjmp	.+768    	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_0_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    2f00:	19 ae       	std	Y+57, r1	; 0x39
    2f02:	7e c1       	rjmp	.+764    	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_1:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    2f04:	8e e2       	ldi	r24, 0x2E	; 46
    2f06:	0e 94 90 0a 	call	0x1520	; 0x1520 <M_DIO_Void_GetPinValue>
    2f0a:	88 23       	and	r24, r24
    2f0c:	09 f0       	breq	.+2      	; 0x2f10 <H_PushButton_U8_PushButtonRead+0x16a>
    2f0e:	78 c1       	rjmp	.+752    	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a8 e4       	ldi	r26, 0x48	; 72
    2f16:	b2 e4       	ldi	r27, 0x42	; 66
    2f18:	8f a3       	std	Y+39, r24	; 0x27
    2f1a:	98 a7       	std	Y+40, r25	; 0x28
    2f1c:	a9 a7       	std	Y+41, r26	; 0x29
    2f1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f20:	6f a1       	ldd	r22, Y+39	; 0x27
    2f22:	78 a5       	ldd	r23, Y+40	; 0x28
    2f24:	89 a5       	ldd	r24, Y+41	; 0x29
    2f26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a e7       	ldi	r20, 0x7A	; 122
    2f2e:	55 e4       	ldi	r21, 0x45	; 69
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	8b a3       	std	Y+35, r24	; 0x23
    2f3a:	9c a3       	std	Y+36, r25	; 0x24
    2f3c:	ad a3       	std	Y+37, r26	; 0x25
    2f3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f40:	6b a1       	ldd	r22, Y+35	; 0x23
    2f42:	7c a1       	ldd	r23, Y+36	; 0x24
    2f44:	8d a1       	ldd	r24, Y+37	; 0x25
    2f46:	9e a1       	ldd	r25, Y+38	; 0x26
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <H_PushButton_U8_PushButtonRead+0x1bc>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9a a3       	std	Y+34, r25	; 0x22
    2f5e:	89 a3       	std	Y+33, r24	; 0x21
    2f60:	3f c0       	rjmp	.+126    	; 0x2fe0 <H_PushButton_U8_PushButtonRead+0x23a>
	else if (__tmp > 65535)
    2f62:	6b a1       	ldd	r22, Y+35	; 0x23
    2f64:	7c a1       	ldd	r23, Y+36	; 0x24
    2f66:	8d a1       	ldd	r24, Y+37	; 0x25
    2f68:	9e a1       	ldd	r25, Y+38	; 0x26
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	3f ef       	ldi	r19, 0xFF	; 255
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	57 e4       	ldi	r21, 0x47	; 71
    2f72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f76:	18 16       	cp	r1, r24
    2f78:	4c f5       	brge	.+82     	; 0x2fcc <H_PushButton_U8_PushButtonRead+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9a a3       	std	Y+34, r25	; 0x22
    2fa0:	89 a3       	std	Y+33, r24	; 0x21
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <H_PushButton_U8_PushButtonRead+0x21c>
    2fa4:	80 e9       	ldi	r24, 0x90	; 144
    2fa6:	91 e0       	ldi	r25, 0x01	; 1
    2fa8:	98 a3       	std	Y+32, r25	; 0x20
    2faa:	8f 8f       	std	Y+31, r24	; 0x1f
    2fac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fae:	98 a1       	ldd	r25, Y+32	; 0x20
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <H_PushButton_U8_PushButtonRead+0x20a>
    2fb4:	98 a3       	std	Y+32, r25	; 0x20
    2fb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fba:	9a a1       	ldd	r25, Y+34	; 0x22
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	9a a3       	std	Y+34, r25	; 0x22
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	69 f7       	brne	.-38     	; 0x2fa4 <H_PushButton_U8_PushButtonRead+0x1fe>
    2fca:	14 c0       	rjmp	.+40     	; 0x2ff4 <H_PushButton_U8_PushButtonRead+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    2fce:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9a a3       	std	Y+34, r25	; 0x22
    2fde:	89 a3       	std	Y+33, r24	; 0x21
    2fe0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fe6:	8d 8f       	std	Y+29, r24	; 0x1d
    2fe8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <H_PushButton_U8_PushButtonRead+0x246>
    2ff0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ff2:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED)
    2ff4:	8e e2       	ldi	r24, 0x2E	; 46
    2ff6:	0e 94 90 0a 	call	0x1520	; 0x1520 <M_DIO_Void_GetPinValue>
    2ffa:	88 23       	and	r24, r24
    2ffc:	09 f0       	breq	.+2      	; 0x3000 <H_PushButton_U8_PushButtonRead+0x25a>
    2ffe:	00 c1       	rjmp	.+512    	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_1_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3000:	19 ae       	std	Y+57, r1	; 0x39
    3002:	fe c0       	rjmp	.+508    	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_2:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    3004:	8d e2       	ldi	r24, 0x2D	; 45
    3006:	0e 94 90 0a 	call	0x1520	; 0x1520 <M_DIO_Void_GetPinValue>
    300a:	88 23       	and	r24, r24
    300c:	09 f0       	breq	.+2      	; 0x3010 <H_PushButton_U8_PushButtonRead+0x26a>
    300e:	f8 c0       	rjmp	.+496    	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	a8 e4       	ldi	r26, 0x48	; 72
    3016:	b2 e4       	ldi	r27, 0x42	; 66
    3018:	89 8f       	std	Y+25, r24	; 0x19
    301a:	9a 8f       	std	Y+26, r25	; 0x1a
    301c:	ab 8f       	std	Y+27, r26	; 0x1b
    301e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3020:	69 8d       	ldd	r22, Y+25	; 0x19
    3022:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	4a e7       	ldi	r20, 0x7A	; 122
    302e:	55 e4       	ldi	r21, 0x45	; 69
    3030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	8d 8b       	std	Y+21, r24	; 0x15
    303a:	9e 8b       	std	Y+22, r25	; 0x16
    303c:	af 8b       	std	Y+23, r26	; 0x17
    303e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3040:	6d 89       	ldd	r22, Y+21	; 0x15
    3042:	7e 89       	ldd	r23, Y+22	; 0x16
    3044:	8f 89       	ldd	r24, Y+23	; 0x17
    3046:	98 8d       	ldd	r25, Y+24	; 0x18
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e8       	ldi	r20, 0x80	; 128
    304e:	5f e3       	ldi	r21, 0x3F	; 63
    3050:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3054:	88 23       	and	r24, r24
    3056:	2c f4       	brge	.+10     	; 0x3062 <H_PushButton_U8_PushButtonRead+0x2bc>
		__ticks = 1;
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	9c 8b       	std	Y+20, r25	; 0x14
    305e:	8b 8b       	std	Y+19, r24	; 0x13
    3060:	3f c0       	rjmp	.+126    	; 0x30e0 <H_PushButton_U8_PushButtonRead+0x33a>
	else if (__tmp > 65535)
    3062:	6d 89       	ldd	r22, Y+21	; 0x15
    3064:	7e 89       	ldd	r23, Y+22	; 0x16
    3066:	8f 89       	ldd	r24, Y+23	; 0x17
    3068:	98 8d       	ldd	r25, Y+24	; 0x18
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	3f ef       	ldi	r19, 0xFF	; 255
    306e:	4f e7       	ldi	r20, 0x7F	; 127
    3070:	57 e4       	ldi	r21, 0x47	; 71
    3072:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3076:	18 16       	cp	r1, r24
    3078:	4c f5       	brge	.+82     	; 0x30cc <H_PushButton_U8_PushButtonRead+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    307a:	69 8d       	ldd	r22, Y+25	; 0x19
    307c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    307e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	40 e2       	ldi	r20, 0x20	; 32
    3088:	51 e4       	ldi	r21, 0x41	; 65
    308a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	bc 01       	movw	r22, r24
    3094:	cd 01       	movw	r24, r26
    3096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	9c 8b       	std	Y+20, r25	; 0x14
    30a0:	8b 8b       	std	Y+19, r24	; 0x13
    30a2:	0f c0       	rjmp	.+30     	; 0x30c2 <H_PushButton_U8_PushButtonRead+0x31c>
    30a4:	80 e9       	ldi	r24, 0x90	; 144
    30a6:	91 e0       	ldi	r25, 0x01	; 1
    30a8:	9a 8b       	std	Y+18, r25	; 0x12
    30aa:	89 8b       	std	Y+17, r24	; 0x11
    30ac:	89 89       	ldd	r24, Y+17	; 0x11
    30ae:	9a 89       	ldd	r25, Y+18	; 0x12
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	f1 f7       	brne	.-4      	; 0x30b0 <H_PushButton_U8_PushButtonRead+0x30a>
    30b4:	9a 8b       	std	Y+18, r25	; 0x12
    30b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ba:	9c 89       	ldd	r25, Y+20	; 0x14
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	9c 8b       	std	Y+20, r25	; 0x14
    30c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c2:	8b 89       	ldd	r24, Y+19	; 0x13
    30c4:	9c 89       	ldd	r25, Y+20	; 0x14
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	69 f7       	brne	.-38     	; 0x30a4 <H_PushButton_U8_PushButtonRead+0x2fe>
    30ca:	14 c0       	rjmp	.+40     	; 0x30f4 <H_PushButton_U8_PushButtonRead+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30cc:	6d 89       	ldd	r22, Y+21	; 0x15
    30ce:	7e 89       	ldd	r23, Y+22	; 0x16
    30d0:	8f 89       	ldd	r24, Y+23	; 0x17
    30d2:	98 8d       	ldd	r25, Y+24	; 0x18
    30d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	9c 8b       	std	Y+20, r25	; 0x14
    30de:	8b 8b       	std	Y+19, r24	; 0x13
    30e0:	8b 89       	ldd	r24, Y+19	; 0x13
    30e2:	9c 89       	ldd	r25, Y+20	; 0x14
    30e4:	98 8b       	std	Y+16, r25	; 0x10
    30e6:	8f 87       	std	Y+15, r24	; 0x0f
    30e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    30ea:	98 89       	ldd	r25, Y+16	; 0x10
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <H_PushButton_U8_PushButtonRead+0x346>
    30f0:	98 8b       	std	Y+16, r25	; 0x10
    30f2:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED)
    30f4:	8d e2       	ldi	r24, 0x2D	; 45
    30f6:	0e 94 90 0a 	call	0x1520	; 0x1520 <M_DIO_Void_GetPinValue>
    30fa:	88 23       	and	r24, r24
    30fc:	09 f0       	breq	.+2      	; 0x3100 <H_PushButton_U8_PushButtonRead+0x35a>
    30fe:	80 c0       	rjmp	.+256    	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_2_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    3100:	19 ae       	std	Y+57, r1	; 0x39
    3102:	7e c0       	rjmp	.+252    	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
			}
		}
		break;
	case PUSH_BUTTON_3:
		if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    3104:	8b e2       	ldi	r24, 0x2B	; 43
    3106:	0e 94 90 0a 	call	0x1520	; 0x1520 <M_DIO_Void_GetPinValue>
    310a:	88 23       	and	r24, r24
    310c:	09 f0       	breq	.+2      	; 0x3110 <H_PushButton_U8_PushButtonRead+0x36a>
    310e:	78 c0       	rjmp	.+240    	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	a8 e4       	ldi	r26, 0x48	; 72
    3116:	b2 e4       	ldi	r27, 0x42	; 66
    3118:	8b 87       	std	Y+11, r24	; 0x0b
    311a:	9c 87       	std	Y+12, r25	; 0x0c
    311c:	ad 87       	std	Y+13, r26	; 0x0d
    311e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3120:	6b 85       	ldd	r22, Y+11	; 0x0b
    3122:	7c 85       	ldd	r23, Y+12	; 0x0c
    3124:	8d 85       	ldd	r24, Y+13	; 0x0d
    3126:	9e 85       	ldd	r25, Y+14	; 0x0e
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	4a e7       	ldi	r20, 0x7A	; 122
    312e:	55 e4       	ldi	r21, 0x45	; 69
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	8f 83       	std	Y+7, r24	; 0x07
    313a:	98 87       	std	Y+8, r25	; 0x08
    313c:	a9 87       	std	Y+9, r26	; 0x09
    313e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3140:	6f 81       	ldd	r22, Y+7	; 0x07
    3142:	78 85       	ldd	r23, Y+8	; 0x08
    3144:	89 85       	ldd	r24, Y+9	; 0x09
    3146:	9a 85       	ldd	r25, Y+10	; 0x0a
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e8       	ldi	r20, 0x80	; 128
    314e:	5f e3       	ldi	r21, 0x3F	; 63
    3150:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3154:	88 23       	and	r24, r24
    3156:	2c f4       	brge	.+10     	; 0x3162 <H_PushButton_U8_PushButtonRead+0x3bc>
		__ticks = 1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	8d 83       	std	Y+5, r24	; 0x05
    3160:	3f c0       	rjmp	.+126    	; 0x31e0 <H_PushButton_U8_PushButtonRead+0x43a>
	else if (__tmp > 65535)
    3162:	6f 81       	ldd	r22, Y+7	; 0x07
    3164:	78 85       	ldd	r23, Y+8	; 0x08
    3166:	89 85       	ldd	r24, Y+9	; 0x09
    3168:	9a 85       	ldd	r25, Y+10	; 0x0a
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	3f ef       	ldi	r19, 0xFF	; 255
    316e:	4f e7       	ldi	r20, 0x7F	; 127
    3170:	57 e4       	ldi	r21, 0x47	; 71
    3172:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3176:	18 16       	cp	r1, r24
    3178:	4c f5       	brge	.+82     	; 0x31cc <H_PushButton_U8_PushButtonRead+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317a:	6b 85       	ldd	r22, Y+11	; 0x0b
    317c:	7c 85       	ldd	r23, Y+12	; 0x0c
    317e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3180:	9e 85       	ldd	r25, Y+14	; 0x0e
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e2       	ldi	r20, 0x20	; 32
    3188:	51 e4       	ldi	r21, 0x41	; 65
    318a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	9e 83       	std	Y+6, r25	; 0x06
    31a0:	8d 83       	std	Y+5, r24	; 0x05
    31a2:	0f c0       	rjmp	.+30     	; 0x31c2 <H_PushButton_U8_PushButtonRead+0x41c>
    31a4:	80 e9       	ldi	r24, 0x90	; 144
    31a6:	91 e0       	ldi	r25, 0x01	; 1
    31a8:	9c 83       	std	Y+4, r25	; 0x04
    31aa:	8b 83       	std	Y+3, r24	; 0x03
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	9c 81       	ldd	r25, Y+4	; 0x04
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <H_PushButton_U8_PushButtonRead+0x40a>
    31b4:	9c 83       	std	Y+4, r25	; 0x04
    31b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ba:	9e 81       	ldd	r25, Y+6	; 0x06
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	9e 83       	std	Y+6, r25	; 0x06
    31c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31c2:	8d 81       	ldd	r24, Y+5	; 0x05
    31c4:	9e 81       	ldd	r25, Y+6	; 0x06
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	69 f7       	brne	.-38     	; 0x31a4 <H_PushButton_U8_PushButtonRead+0x3fe>
    31ca:	14 c0       	rjmp	.+40     	; 0x31f4 <H_PushButton_U8_PushButtonRead+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31cc:	6f 81       	ldd	r22, Y+7	; 0x07
    31ce:	78 85       	ldd	r23, Y+8	; 0x08
    31d0:	89 85       	ldd	r24, Y+9	; 0x09
    31d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	9e 83       	std	Y+6, r25	; 0x06
    31de:	8d 83       	std	Y+5, r24	; 0x05
    31e0:	8d 81       	ldd	r24, Y+5	; 0x05
    31e2:	9e 81       	ldd	r25, Y+6	; 0x06
    31e4:	9a 83       	std	Y+2, r25	; 0x02
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	9a 81       	ldd	r25, Y+2	; 0x02
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <H_PushButton_U8_PushButtonRead+0x446>
    31f0:	9a 83       	std	Y+2, r25	; 0x02
    31f2:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED)
    31f4:	8b e2       	ldi	r24, 0x2B	; 43
    31f6:	0e 94 90 0a 	call	0x1520	; 0x1520 <M_DIO_Void_GetPinValue>
    31fa:	88 23       	and	r24, r24
    31fc:	09 f4       	brne	.+2      	; 0x3200 <H_PushButton_U8_PushButtonRead+0x45a>
			{
				//while(M_DIO_Void_GetPinValue(PUSH_BUTTON_3_PIN) == PUSH_BUTTON_PRESSED);
				Local_U8_Reading = PUSH_BUTTON_PRESSED;
    31fe:	19 ae       	std	Y+57, r1	; 0x39
			}
		}
		break;
	default:                                                         break;
	}
	return Local_U8_Reading;
    3200:	89 ad       	ldd	r24, Y+57	; 0x39
}
    3202:	ec 96       	adiw	r28, 0x3c	; 60
    3204:	0f b6       	in	r0, 0x3f	; 63
    3206:	f8 94       	cli
    3208:	de bf       	out	0x3e, r29	; 62
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	cd bf       	out	0x3d, r28	; 61
    320e:	cf 91       	pop	r28
    3210:	df 91       	pop	r29
    3212:	08 95       	ret

00003214 <Relay_voidInit>:
#include "DIO_Interface.h"
#include "Relay.h"
#include <util/delay.h>

void Relay_voidInit(void)
{
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    M_DIO_Void_SetPinDirection(RELAY_PIN,OUTPUT);
    321c:	85 e2       	ldi	r24, 0x25	; 37
    321e:	61 e0       	ldi	r22, 0x01	; 1
    3220:	0e 94 64 08 	call	0x10c8	; 0x10c8 <M_DIO_Void_SetPinDirection>
}
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	08 95       	ret

0000322a <Relay_voidFlash>:

void Relay_voidFlash(void)
{
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	6c 97       	sbiw	r28, 0x1c	; 28
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    M_DIO_Void_SetPinValue(RELAY_PIN,HIGH);
    323e:	85 e2       	ldi	r24, 0x25	; 37
    3240:	61 e0       	ldi	r22, 0x01	; 1
    3242:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	aa e7       	ldi	r26, 0x7A	; 122
    324c:	b4 e4       	ldi	r27, 0x44	; 68
    324e:	89 8f       	std	Y+25, r24	; 0x19
    3250:	9a 8f       	std	Y+26, r25	; 0x1a
    3252:	ab 8f       	std	Y+27, r26	; 0x1b
    3254:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3256:	69 8d       	ldd	r22, Y+25	; 0x19
    3258:	7a 8d       	ldd	r23, Y+26	; 0x1a
    325a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	4a e7       	ldi	r20, 0x7A	; 122
    3264:	55 e4       	ldi	r21, 0x45	; 69
    3266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	8d 8b       	std	Y+21, r24	; 0x15
    3270:	9e 8b       	std	Y+22, r25	; 0x16
    3272:	af 8b       	std	Y+23, r26	; 0x17
    3274:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3276:	6d 89       	ldd	r22, Y+21	; 0x15
    3278:	7e 89       	ldd	r23, Y+22	; 0x16
    327a:	8f 89       	ldd	r24, Y+23	; 0x17
    327c:	98 8d       	ldd	r25, Y+24	; 0x18
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	40 e8       	ldi	r20, 0x80	; 128
    3284:	5f e3       	ldi	r21, 0x3F	; 63
    3286:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    328a:	88 23       	and	r24, r24
    328c:	2c f4       	brge	.+10     	; 0x3298 <Relay_voidFlash+0x6e>
		__ticks = 1;
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	9c 8b       	std	Y+20, r25	; 0x14
    3294:	8b 8b       	std	Y+19, r24	; 0x13
    3296:	3f c0       	rjmp	.+126    	; 0x3316 <Relay_voidFlash+0xec>
	else if (__tmp > 65535)
    3298:	6d 89       	ldd	r22, Y+21	; 0x15
    329a:	7e 89       	ldd	r23, Y+22	; 0x16
    329c:	8f 89       	ldd	r24, Y+23	; 0x17
    329e:	98 8d       	ldd	r25, Y+24	; 0x18
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	3f ef       	ldi	r19, 0xFF	; 255
    32a4:	4f e7       	ldi	r20, 0x7F	; 127
    32a6:	57 e4       	ldi	r21, 0x47	; 71
    32a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ac:	18 16       	cp	r1, r24
    32ae:	4c f5       	brge	.+82     	; 0x3302 <Relay_voidFlash+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b0:	69 8d       	ldd	r22, Y+25	; 0x19
    32b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	40 e2       	ldi	r20, 0x20	; 32
    32be:	51 e4       	ldi	r21, 0x41	; 65
    32c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	bc 01       	movw	r22, r24
    32ca:	cd 01       	movw	r24, r26
    32cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	9c 8b       	std	Y+20, r25	; 0x14
    32d6:	8b 8b       	std	Y+19, r24	; 0x13
    32d8:	0f c0       	rjmp	.+30     	; 0x32f8 <Relay_voidFlash+0xce>
    32da:	80 e9       	ldi	r24, 0x90	; 144
    32dc:	91 e0       	ldi	r25, 0x01	; 1
    32de:	9a 8b       	std	Y+18, r25	; 0x12
    32e0:	89 8b       	std	Y+17, r24	; 0x11
    32e2:	89 89       	ldd	r24, Y+17	; 0x11
    32e4:	9a 89       	ldd	r25, Y+18	; 0x12
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	f1 f7       	brne	.-4      	; 0x32e6 <Relay_voidFlash+0xbc>
    32ea:	9a 8b       	std	Y+18, r25	; 0x12
    32ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ee:	8b 89       	ldd	r24, Y+19	; 0x13
    32f0:	9c 89       	ldd	r25, Y+20	; 0x14
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	9c 8b       	std	Y+20, r25	; 0x14
    32f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f8:	8b 89       	ldd	r24, Y+19	; 0x13
    32fa:	9c 89       	ldd	r25, Y+20	; 0x14
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	69 f7       	brne	.-38     	; 0x32da <Relay_voidFlash+0xb0>
    3300:	14 c0       	rjmp	.+40     	; 0x332a <Relay_voidFlash+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3302:	6d 89       	ldd	r22, Y+21	; 0x15
    3304:	7e 89       	ldd	r23, Y+22	; 0x16
    3306:	8f 89       	ldd	r24, Y+23	; 0x17
    3308:	98 8d       	ldd	r25, Y+24	; 0x18
    330a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	9c 8b       	std	Y+20, r25	; 0x14
    3314:	8b 8b       	std	Y+19, r24	; 0x13
    3316:	8b 89       	ldd	r24, Y+19	; 0x13
    3318:	9c 89       	ldd	r25, Y+20	; 0x14
    331a:	98 8b       	std	Y+16, r25	; 0x10
    331c:	8f 87       	std	Y+15, r24	; 0x0f
    331e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3320:	98 89       	ldd	r25, Y+16	; 0x10
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	f1 f7       	brne	.-4      	; 0x3322 <Relay_voidFlash+0xf8>
    3326:	98 8b       	std	Y+16, r25	; 0x10
    3328:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);
    M_DIO_Void_SetPinValue(RELAY_PIN,LOW);
    332a:	85 e2       	ldi	r24, 0x25	; 37
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_DIO_Void_SetPinValue>
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	aa e7       	ldi	r26, 0x7A	; 122
    3338:	b4 e4       	ldi	r27, 0x44	; 68
    333a:	8b 87       	std	Y+11, r24	; 0x0b
    333c:	9c 87       	std	Y+12, r25	; 0x0c
    333e:	ad 87       	std	Y+13, r26	; 0x0d
    3340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3342:	6b 85       	ldd	r22, Y+11	; 0x0b
    3344:	7c 85       	ldd	r23, Y+12	; 0x0c
    3346:	8d 85       	ldd	r24, Y+13	; 0x0d
    3348:	9e 85       	ldd	r25, Y+14	; 0x0e
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	4a e7       	ldi	r20, 0x7A	; 122
    3350:	55 e4       	ldi	r21, 0x45	; 69
    3352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	8f 83       	std	Y+7, r24	; 0x07
    335c:	98 87       	std	Y+8, r25	; 0x08
    335e:	a9 87       	std	Y+9, r26	; 0x09
    3360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3362:	6f 81       	ldd	r22, Y+7	; 0x07
    3364:	78 85       	ldd	r23, Y+8	; 0x08
    3366:	89 85       	ldd	r24, Y+9	; 0x09
    3368:	9a 85       	ldd	r25, Y+10	; 0x0a
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	40 e8       	ldi	r20, 0x80	; 128
    3370:	5f e3       	ldi	r21, 0x3F	; 63
    3372:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3376:	88 23       	and	r24, r24
    3378:	2c f4       	brge	.+10     	; 0x3384 <Relay_voidFlash+0x15a>
		__ticks = 1;
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	9e 83       	std	Y+6, r25	; 0x06
    3380:	8d 83       	std	Y+5, r24	; 0x05
    3382:	3f c0       	rjmp	.+126    	; 0x3402 <Relay_voidFlash+0x1d8>
	else if (__tmp > 65535)
    3384:	6f 81       	ldd	r22, Y+7	; 0x07
    3386:	78 85       	ldd	r23, Y+8	; 0x08
    3388:	89 85       	ldd	r24, Y+9	; 0x09
    338a:	9a 85       	ldd	r25, Y+10	; 0x0a
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	3f ef       	ldi	r19, 0xFF	; 255
    3390:	4f e7       	ldi	r20, 0x7F	; 127
    3392:	57 e4       	ldi	r21, 0x47	; 71
    3394:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3398:	18 16       	cp	r1, r24
    339a:	4c f5       	brge	.+82     	; 0x33ee <Relay_voidFlash+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339c:	6b 85       	ldd	r22, Y+11	; 0x0b
    339e:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a4:	20 e0       	ldi	r18, 0x00	; 0
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	40 e2       	ldi	r20, 0x20	; 32
    33aa:	51 e4       	ldi	r21, 0x41	; 65
    33ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	bc 01       	movw	r22, r24
    33b6:	cd 01       	movw	r24, r26
    33b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	9e 83       	std	Y+6, r25	; 0x06
    33c2:	8d 83       	std	Y+5, r24	; 0x05
    33c4:	0f c0       	rjmp	.+30     	; 0x33e4 <Relay_voidFlash+0x1ba>
    33c6:	80 e9       	ldi	r24, 0x90	; 144
    33c8:	91 e0       	ldi	r25, 0x01	; 1
    33ca:	9c 83       	std	Y+4, r25	; 0x04
    33cc:	8b 83       	std	Y+3, r24	; 0x03
    33ce:	8b 81       	ldd	r24, Y+3	; 0x03
    33d0:	9c 81       	ldd	r25, Y+4	; 0x04
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <Relay_voidFlash+0x1a8>
    33d6:	9c 83       	std	Y+4, r25	; 0x04
    33d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	9e 81       	ldd	r25, Y+6	; 0x06
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	9e 83       	std	Y+6, r25	; 0x06
    33e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e4:	8d 81       	ldd	r24, Y+5	; 0x05
    33e6:	9e 81       	ldd	r25, Y+6	; 0x06
    33e8:	00 97       	sbiw	r24, 0x00	; 0
    33ea:	69 f7       	brne	.-38     	; 0x33c6 <Relay_voidFlash+0x19c>
    33ec:	14 c0       	rjmp	.+40     	; 0x3416 <Relay_voidFlash+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ee:	6f 81       	ldd	r22, Y+7	; 0x07
    33f0:	78 85       	ldd	r23, Y+8	; 0x08
    33f2:	89 85       	ldd	r24, Y+9	; 0x09
    33f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	9e 83       	std	Y+6, r25	; 0x06
    3400:	8d 83       	std	Y+5, r24	; 0x05
    3402:	8d 81       	ldd	r24, Y+5	; 0x05
    3404:	9e 81       	ldd	r25, Y+6	; 0x06
    3406:	9a 83       	std	Y+2, r25	; 0x02
    3408:	89 83       	std	Y+1, r24	; 0x01
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	9a 81       	ldd	r25, Y+2	; 0x02
    340e:	01 97       	sbiw	r24, 0x01	; 1
    3410:	f1 f7       	brne	.-4      	; 0x340e <Relay_voidFlash+0x1e4>
    3412:	9a 83       	std	Y+2, r25	; 0x02
    3414:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    3416:	6c 96       	adiw	r28, 0x1c	; 28
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <setup>:
u8 gear_ArrState[3]={'N','D','R'};
static u8 gearState = 0;
u16 car_danger = 0;
/*setup*/
void setup (void)
{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    gearState = gear_ArrState[0];
    3430:	80 91 8b 00 	lds	r24, 0x008B
    3434:	80 93 8e 00 	sts	0x008E, r24
    //GIE_voidEnable();/*enable gie*/
    H_Lcd_Void_LCDInit();
    3438:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <H_Lcd_Void_LCDInit>
    H_Buzzer_Void_BuzzerInit();
    343c:	0e 94 33 06 	call	0xc66	; 0xc66 <H_Buzzer_Void_BuzzerInit>
    M_ADC_Void_ADCInit();
    3440:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_ADC_Void_ADCInit>
    H_LED_Void_LedInit(LED_YEL);
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	0e 94 76 13 	call	0x26ec	; 0x26ec <H_LED_Void_LedInit>
    H_LED_Void_LedInit(LED_BLU);
    344a:	82 e0       	ldi	r24, 0x02	; 2
    344c:	0e 94 76 13 	call	0x26ec	; 0x26ec <H_LED_Void_LedInit>
    H_LED_Void_LedInit(LED_GRN);
    3450:	83 e0       	ldi	r24, 0x03	; 3
    3452:	0e 94 76 13 	call	0x26ec	; 0x26ec <H_LED_Void_LedInit>
    H_LED_Void_LedInit(LED_RED);
    3456:	84 e0       	ldi	r24, 0x04	; 4
    3458:	0e 94 76 13 	call	0x26ec	; 0x26ec <H_LED_Void_LedInit>
    H_PushButton_Void_PushButtonInit(FUEL);
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	0e 94 94 16 	call	0x2d28	; 0x2d28 <H_PushButton_Void_PushButtonInit>
    H_PushButton_Void_PushButtonInit(BRAKE);
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	0e 94 94 16 	call	0x2d28	; 0x2d28 <H_PushButton_Void_PushButtonInit>
    H_PushButton_Void_PushButtonInit(CCS);
    3468:	82 e0       	ldi	r24, 0x02	; 2
    346a:	0e 94 94 16 	call	0x2d28	; 0x2d28 <H_PushButton_Void_PushButtonInit>
    H_PushButton_Void_PushButtonInit(GB);
    346e:	83 e0       	ldi	r24, 0x03	; 3
    3470:	0e 94 94 16 	call	0x2d28	; 0x2d28 <H_PushButton_Void_PushButtonInit>
    Relay_voidInit();
    3474:	0e 94 0a 19 	call	0x3214	; 0x3214 <Relay_voidInit>

    #if (DANGER)
    DangerFlag.AllFlags=0;
    #endif
    H_Lcd_Void_LCDGoTo(0,2);
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	62 e0       	ldi	r22, 0x02	; 2
    347c:	0e 94 4f 13 	call	0x269e	; 0x269e <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString((u8*)"CCS OFF ");
    3480:	80 e6       	ldi	r24, 0x60	; 96
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	0e 94 92 12 	call	0x2524	; 0x2524 <H_Lcd_Void_LCDWriteString>
    H_Lcd_Void_LCDGoTo(1,2);
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	62 e0       	ldi	r22, 0x02	; 2
    348c:	0e 94 4f 13 	call	0x269e	; 0x269e <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString((u8*)"R N D : N");
    3490:	89 e6       	ldi	r24, 0x69	; 105
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	0e 94 92 12 	call	0x2524	; 0x2524 <H_Lcd_Void_LCDWriteString>
}
    3498:	cf 91       	pop	r28
    349a:	df 91       	pop	r29
    349c:	08 95       	ret

0000349e <main>:
/*loop*/
int main (void)
{
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    setup();
    34a6:	0e 94 14 1a 	call	0x3428	; 0x3428 <setup>
        while(1)
        {
            #if (DANGER)
            DangerSate();
            #endif
            Fuel_Padel();
    34aa:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <Fuel_Padel>
            Brake_Padel();
    34ae:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <Brake_Padel>
            if(!H_PushButton_U8_PushButtonRead(CCS)){CCS_States();}
    34b2:	82 e0       	ldi	r24, 0x02	; 2
    34b4:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <H_PushButton_U8_PushButtonRead>
    34b8:	88 23       	and	r24, r24
    34ba:	11 f4       	brne	.+4      	; 0x34c0 <main+0x22>
    34bc:	0e 94 b4 1a 	call	0x3568	; 0x3568 <CCS_States>
            if(!H_PushButton_U8_PushButtonRead(GB)){GB_Shift();}
    34c0:	83 e0       	ldi	r24, 0x03	; 3
    34c2:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <H_PushButton_U8_PushButtonRead>
    34c6:	88 23       	and	r24, r24
    34c8:	81 f7       	brne	.-32     	; 0x34aa <main+0xc>
    34ca:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <GB_Shift>
    34ce:	ed cf       	rjmp	.-38     	; 0x34aa <main+0xc>

000034d0 <Fuel_Padel>:

        }
}

void Fuel_Padel(void)
{
    34d0:	df 93       	push	r29
    34d2:	cf 93       	push	r28
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    /*if((H_PushButton_U8_PushButtonRead(FUEL)==PUSH_BUTTON_PRESSED)&&(DangerFlag.AllFlags <= 2))*/
    if((H_PushButton_U8_PushButtonRead(FUEL)==PUSH_BUTTON_PRESSED))
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <H_PushButton_U8_PushButtonRead>
    34de:	88 23       	and	r24, r24
    34e0:	31 f4       	brne	.+12     	; 0x34ee <Fuel_Padel+0x1e>
    {
        H_LED_Void_LedOn(LED_BLU);
    34e2:	82 e0       	ldi	r24, 0x02	; 2
    34e4:	0e 94 b6 13 	call	0x276c	; 0x276c <H_LED_Void_LedOn>
        CCS_OFF();
    34e8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <CCS_OFF>
    34ec:	03 c0       	rjmp	.+6      	; 0x34f4 <Fuel_Padel+0x24>
    }
    else
    {
        H_LED_Void_LedOff(LED_BLU);
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	0e 94 f6 13 	call	0x27ec	; 0x27ec <H_LED_Void_LedOff>
    }

}
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	08 95       	ret

000034fa <Brake_Padel>:

void Brake_Padel(void){
    34fa:	df 93       	push	r29
    34fc:	cf 93       	push	r28
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
    /*if((H_PushButton_U8_PushButtonRead(BRAKE)==PUSH_BUTTON_PRESSED)||(DangerFlag.AllFlags > 2))*/
    if(H_PushButton_U8_PushButtonRead(BRAKE)==PUSH_BUTTON_PRESSED)
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <H_PushButton_U8_PushButtonRead>
    3508:	88 23       	and	r24, r24
    350a:	21 f4       	brne	.+8      	; 0x3514 <Brake_Padel+0x1a>
    {
        H_LED_Void_LedOn(LED_RED);
    350c:	84 e0       	ldi	r24, 0x04	; 4
    350e:	0e 94 b6 13 	call	0x276c	; 0x276c <H_LED_Void_LedOn>
    3512:	03 c0       	rjmp	.+6      	; 0x351a <Brake_Padel+0x20>
    }
    else
    {
        H_LED_Void_LedOff(LED_RED);
    3514:	84 e0       	ldi	r24, 0x04	; 4
    3516:	0e 94 f6 13 	call	0x27ec	; 0x27ec <H_LED_Void_LedOff>
    }
}
    351a:	cf 91       	pop	r28
    351c:	df 91       	pop	r29
    351e:	08 95       	ret

00003520 <CCS_ON>:

void CCS_ON(void)
{
    3520:	df 93       	push	r29
    3522:	cf 93       	push	r28
    3524:	cd b7       	in	r28, 0x3d	; 61
    3526:	de b7       	in	r29, 0x3e	; 62
    H_LED_Void_LedOn(LED_GRN);
    3528:	83 e0       	ldi	r24, 0x03	; 3
    352a:	0e 94 b6 13 	call	0x276c	; 0x276c <H_LED_Void_LedOn>
    H_Lcd_Void_LCDGoTo(0,2);
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	62 e0       	ldi	r22, 0x02	; 2
    3532:	0e 94 4f 13 	call	0x269e	; 0x269e <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString(CCSON);
    3536:	83 e7       	ldi	r24, 0x73	; 115
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	0e 94 92 12 	call	0x2524	; 0x2524 <H_Lcd_Void_LCDWriteString>
}
    353e:	cf 91       	pop	r28
    3540:	df 91       	pop	r29
    3542:	08 95       	ret

00003544 <CCS_OFF>:

void CCS_OFF(void)
{
    3544:	df 93       	push	r29
    3546:	cf 93       	push	r28
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    H_LED_Void_LedOff(LED_GRN);
    354c:	83 e0       	ldi	r24, 0x03	; 3
    354e:	0e 94 f6 13 	call	0x27ec	; 0x27ec <H_LED_Void_LedOff>
    H_Lcd_Void_LCDGoTo(0,2);
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	62 e0       	ldi	r22, 0x02	; 2
    3556:	0e 94 4f 13 	call	0x269e	; 0x269e <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString(CCSOFF);
    355a:	8b e7       	ldi	r24, 0x7B	; 123
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	0e 94 92 12 	call	0x2524	; 0x2524 <H_Lcd_Void_LCDWriteString>
}
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <CCS_States>:

void CCS_States(void){
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62

    
    static u8 CCS_State = 0;
    
    H_Buzzer_Void_BuzzerOnce();
    3570:	0e 94 5e 06 	call	0xcbc	; 0xcbc <H_Buzzer_Void_BuzzerOnce>
    /*change the CCS state if the state of GB is : D */
    if(gearState==gear_ArrState[1])
    3574:	90 91 8c 00 	lds	r25, 0x008C
    3578:	80 91 8e 00 	lds	r24, 0x008E
    357c:	98 17       	cp	r25, r24
    357e:	c1 f4       	brne	.+48     	; 0x35b0 <CCS_States+0x48>
    {
        /*tog the state*/
        CCS_State ^= 1;
    3580:	90 91 91 00 	lds	r25, 0x0091
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	89 27       	eor	r24, r25
    3588:	80 93 91 00 	sts	0x0091, r24
        /*if((CCS_State==1)&&(DangerFlag.AllFlags<=2))*/
        if(CCS_State==1)
    358c:	80 91 91 00 	lds	r24, 0x0091
    3590:	81 30       	cpi	r24, 0x01	; 1
    3592:	19 f4       	brne	.+6      	; 0x359a <CCS_States+0x32>
        {       
            CCS_ON();
    3594:	0e 94 90 1a 	call	0x3520	; 0x3520 <CCS_ON>
    3598:	02 c0       	rjmp	.+4      	; 0x359e <CCS_States+0x36>
        }
        else
        {
            CCS_OFF();
    359a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <CCS_OFF>
        }
        /*freez the state untill the user release the button */
        while (!H_PushButton_U8_PushButtonRead(CCS));   
    359e:	82 e0       	ldi	r24, 0x02	; 2
    35a0:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <H_PushButton_U8_PushButtonRead>
    35a4:	88 23       	and	r24, r24
    35a6:	d9 f3       	breq	.-10     	; 0x359e <CCS_States+0x36>
    35a8:	0b c0       	rjmp	.+22     	; 0x35c0 <CCS_States+0x58>
    else
    {
        /*if the CCS button pressed and the GB state not D : produce alarm */
        while (!H_PushButton_U8_PushButtonRead(CCS))
            {
                H_LED_Void_LedOn(LED_YEL);
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	0e 94 b6 13 	call	0x276c	; 0x276c <H_LED_Void_LedOn>
        while (!H_PushButton_U8_PushButtonRead(CCS));   
    }
    else
    {
        /*if the CCS button pressed and the GB state not D : produce alarm */
        while (!H_PushButton_U8_PushButtonRead(CCS))
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <H_PushButton_U8_PushButtonRead>
    35b6:	88 23       	and	r24, r24
    35b8:	c1 f3       	breq	.-16     	; 0x35aa <CCS_States+0x42>
            {
                H_LED_Void_LedOn(LED_YEL);
            }
            H_LED_Void_LedOff(LED_YEL);
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	0e 94 f6 13 	call	0x27ec	; 0x27ec <H_LED_Void_LedOff>
    }

}
    35c0:	cf 91       	pop	r28
    35c2:	df 91       	pop	r29
    35c4:	08 95       	ret

000035c6 <GB_Shift>:

void GB_Shift(void){
    35c6:	df 93       	push	r29
    35c8:	cf 93       	push	r28
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
    static u8 counter = 0;
    /*buzz with press*/
    H_Buzzer_Void_BuzzerOnce();
    35ce:	0e 94 5e 06 	call	0xcbc	; 0xcbc <H_Buzzer_Void_BuzzerOnce>
    if((!H_PushButton_U8_PushButtonRead(GB)))
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <H_PushButton_U8_PushButtonRead>
    35d8:	88 23       	and	r24, r24
    35da:	e1 f5       	brne	.+120    	; 0x3654 <GB_Shift+0x8e>
    {
        /*change the gearbox state only if the brake is pressed */
        if(!H_PushButton_U8_PushButtonRead(BRAKE))
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <H_PushButton_U8_PushButtonRead>
    35e2:	88 23       	and	r24, r24
    35e4:	79 f5       	brne	.+94     	; 0x3644 <GB_Shift+0x7e>
        {
            /*we have 3 state of iterate through them using counter*/
            if(counter==2)
    35e6:	80 91 92 00 	lds	r24, 0x0092
    35ea:	82 30       	cpi	r24, 0x02	; 2
    35ec:	19 f4       	brne	.+6      	; 0x35f4 <GB_Shift+0x2e>
                {counter=0;}
    35ee:	10 92 92 00 	sts	0x0092, r1
    35f2:	05 c0       	rjmp	.+10     	; 0x35fe <GB_Shift+0x38>
            else
            {counter++;}
    35f4:	80 91 92 00 	lds	r24, 0x0092
    35f8:	8f 5f       	subi	r24, 0xFF	; 255
    35fa:	80 93 92 00 	sts	0x0092, r24
            /*save the gear state in a global var */
            gearState = gear_ArrState[counter];
    35fe:	80 91 92 00 	lds	r24, 0x0092
    3602:	88 2f       	mov	r24, r24
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	fc 01       	movw	r30, r24
    3608:	e5 57       	subi	r30, 0x75	; 117
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	80 81       	ld	r24, Z
    360e:	80 93 8e 00 	sts	0x008E, r24
            H_Lcd_Void_LCDGoTo(1,10);
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	6a e0       	ldi	r22, 0x0A	; 10
    3616:	0e 94 4f 13 	call	0x269e	; 0x269e <H_Lcd_Void_LCDGoTo>
            H_Lcd_Void_LCDWriteCharacter(gearState);
    361a:	80 91 8e 00 	lds	r24, 0x008E
    361e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <H_Lcd_Void_LCDWriteCharacter>
            /*if GB state != D turn off the CCS */
            if(gearState != gear_ArrState[1])
    3622:	90 91 8c 00 	lds	r25, 0x008C
    3626:	80 91 8e 00 	lds	r24, 0x008E
    362a:	98 17       	cp	r25, r24
    362c:	11 f0       	breq	.+4      	; 0x3632 <GB_Shift+0x6c>
            {
                CCS_OFF();
    362e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <CCS_OFF>
            }
            while (!H_PushButton_U8_PushButtonRead(GB));
    3632:	83 e0       	ldi	r24, 0x03	; 3
    3634:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <H_PushButton_U8_PushButtonRead>
    3638:	88 23       	and	r24, r24
    363a:	d9 f3       	breq	.-10     	; 0x3632 <GB_Shift+0x6c>
    363c:	0b c0       	rjmp	.+22     	; 0x3654 <GB_Shift+0x8e>
        {
            /*if the GB button pressed and the BRAKE not pressed : produce alarm */

            while (!H_PushButton_U8_PushButtonRead(GB))
            {
                H_LED_Void_LedOn(LED_YEL);
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	0e 94 b6 13 	call	0x276c	; 0x276c <H_LED_Void_LedOn>
        }
        else
        {
            /*if the GB button pressed and the BRAKE not pressed : produce alarm */

            while (!H_PushButton_U8_PushButtonRead(GB))
    3644:	83 e0       	ldi	r24, 0x03	; 3
    3646:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <H_PushButton_U8_PushButtonRead>
    364a:	88 23       	and	r24, r24
    364c:	c1 f3       	breq	.-16     	; 0x363e <GB_Shift+0x78>
            {
                H_LED_Void_LedOn(LED_YEL);
            }
            H_LED_Void_LedOff(LED_YEL);
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	0e 94 f6 13 	call	0x27ec	; 0x27ec <H_LED_Void_LedOff>
        }
       
    }
    
}
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <ADC_u16Mapping_mm>:

u16 ADC_u16Mapping_mm(void)
{
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	00 d0       	rcall	.+0      	; 0x3660 <ADC_u16Mapping_mm+0x6>
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
    u16 Local_u16GetADC =0;
    3664:	1a 82       	std	Y+2, r1	; 0x02
    3666:	19 82       	std	Y+1, r1	; 0x01
    /*read the ADC value*/
    Local_u16GetADC = M_ADC_U16_ADCRead(ADC_CHANNEL_0);
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <M_ADC_U16_ADCRead>
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
    /*map it from 0>> 1023 to 0 >> 10 m (* 1000) to aviod float operation  */
    return (Local_u16GetADC * 10 / 1023);
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	9a 81       	ldd	r25, Y+2	; 0x02
    3676:	9c 01       	movw	r18, r24
    3678:	22 0f       	add	r18, r18
    367a:	33 1f       	adc	r19, r19
    367c:	c9 01       	movw	r24, r18
    367e:	88 0f       	add	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	88 0f       	add	r24, r24
    3684:	99 1f       	adc	r25, r25
    3686:	82 0f       	add	r24, r18
    3688:	93 1f       	adc	r25, r19
    368a:	2f ef       	ldi	r18, 0xFF	; 255
    368c:	33 e0       	ldi	r19, 0x03	; 3
    368e:	b9 01       	movw	r22, r18
    3690:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <__udivmodhi4>
    3694:	cb 01       	movw	r24, r22
}
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	cf 91       	pop	r28
    369c:	df 91       	pop	r29
    369e:	08 95       	ret

000036a0 <__udivmodqi4>:
    36a0:	99 1b       	sub	r25, r25
    36a2:	79 e0       	ldi	r23, 0x09	; 9
    36a4:	04 c0       	rjmp	.+8      	; 0x36ae <__udivmodqi4_ep>

000036a6 <__udivmodqi4_loop>:
    36a6:	99 1f       	adc	r25, r25
    36a8:	96 17       	cp	r25, r22
    36aa:	08 f0       	brcs	.+2      	; 0x36ae <__udivmodqi4_ep>
    36ac:	96 1b       	sub	r25, r22

000036ae <__udivmodqi4_ep>:
    36ae:	88 1f       	adc	r24, r24
    36b0:	7a 95       	dec	r23
    36b2:	c9 f7       	brne	.-14     	; 0x36a6 <__udivmodqi4_loop>
    36b4:	80 95       	com	r24
    36b6:	08 95       	ret

000036b8 <__udivmodhi4>:
    36b8:	aa 1b       	sub	r26, r26
    36ba:	bb 1b       	sub	r27, r27
    36bc:	51 e1       	ldi	r21, 0x11	; 17
    36be:	07 c0       	rjmp	.+14     	; 0x36ce <__udivmodhi4_ep>

000036c0 <__udivmodhi4_loop>:
    36c0:	aa 1f       	adc	r26, r26
    36c2:	bb 1f       	adc	r27, r27
    36c4:	a6 17       	cp	r26, r22
    36c6:	b7 07       	cpc	r27, r23
    36c8:	10 f0       	brcs	.+4      	; 0x36ce <__udivmodhi4_ep>
    36ca:	a6 1b       	sub	r26, r22
    36cc:	b7 0b       	sbc	r27, r23

000036ce <__udivmodhi4_ep>:
    36ce:	88 1f       	adc	r24, r24
    36d0:	99 1f       	adc	r25, r25
    36d2:	5a 95       	dec	r21
    36d4:	a9 f7       	brne	.-22     	; 0x36c0 <__udivmodhi4_loop>
    36d6:	80 95       	com	r24
    36d8:	90 95       	com	r25
    36da:	bc 01       	movw	r22, r24
    36dc:	cd 01       	movw	r24, r26
    36de:	08 95       	ret

000036e0 <__divmodsi4>:
    36e0:	97 fb       	bst	r25, 7
    36e2:	09 2e       	mov	r0, r25
    36e4:	05 26       	eor	r0, r21
    36e6:	0e d0       	rcall	.+28     	; 0x3704 <__divmodsi4_neg1>
    36e8:	57 fd       	sbrc	r21, 7
    36ea:	04 d0       	rcall	.+8      	; 0x36f4 <__divmodsi4_neg2>
    36ec:	14 d0       	rcall	.+40     	; 0x3716 <__udivmodsi4>
    36ee:	0a d0       	rcall	.+20     	; 0x3704 <__divmodsi4_neg1>
    36f0:	00 1c       	adc	r0, r0
    36f2:	38 f4       	brcc	.+14     	; 0x3702 <__divmodsi4_exit>

000036f4 <__divmodsi4_neg2>:
    36f4:	50 95       	com	r21
    36f6:	40 95       	com	r20
    36f8:	30 95       	com	r19
    36fa:	21 95       	neg	r18
    36fc:	3f 4f       	sbci	r19, 0xFF	; 255
    36fe:	4f 4f       	sbci	r20, 0xFF	; 255
    3700:	5f 4f       	sbci	r21, 0xFF	; 255

00003702 <__divmodsi4_exit>:
    3702:	08 95       	ret

00003704 <__divmodsi4_neg1>:
    3704:	f6 f7       	brtc	.-4      	; 0x3702 <__divmodsi4_exit>
    3706:	90 95       	com	r25
    3708:	80 95       	com	r24
    370a:	70 95       	com	r23
    370c:	61 95       	neg	r22
    370e:	7f 4f       	sbci	r23, 0xFF	; 255
    3710:	8f 4f       	sbci	r24, 0xFF	; 255
    3712:	9f 4f       	sbci	r25, 0xFF	; 255
    3714:	08 95       	ret

00003716 <__udivmodsi4>:
    3716:	a1 e2       	ldi	r26, 0x21	; 33
    3718:	1a 2e       	mov	r1, r26
    371a:	aa 1b       	sub	r26, r26
    371c:	bb 1b       	sub	r27, r27
    371e:	fd 01       	movw	r30, r26
    3720:	0d c0       	rjmp	.+26     	; 0x373c <__udivmodsi4_ep>

00003722 <__udivmodsi4_loop>:
    3722:	aa 1f       	adc	r26, r26
    3724:	bb 1f       	adc	r27, r27
    3726:	ee 1f       	adc	r30, r30
    3728:	ff 1f       	adc	r31, r31
    372a:	a2 17       	cp	r26, r18
    372c:	b3 07       	cpc	r27, r19
    372e:	e4 07       	cpc	r30, r20
    3730:	f5 07       	cpc	r31, r21
    3732:	20 f0       	brcs	.+8      	; 0x373c <__udivmodsi4_ep>
    3734:	a2 1b       	sub	r26, r18
    3736:	b3 0b       	sbc	r27, r19
    3738:	e4 0b       	sbc	r30, r20
    373a:	f5 0b       	sbc	r31, r21

0000373c <__udivmodsi4_ep>:
    373c:	66 1f       	adc	r22, r22
    373e:	77 1f       	adc	r23, r23
    3740:	88 1f       	adc	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	1a 94       	dec	r1
    3746:	69 f7       	brne	.-38     	; 0x3722 <__udivmodsi4_loop>
    3748:	60 95       	com	r22
    374a:	70 95       	com	r23
    374c:	80 95       	com	r24
    374e:	90 95       	com	r25
    3750:	9b 01       	movw	r18, r22
    3752:	ac 01       	movw	r20, r24
    3754:	bd 01       	movw	r22, r26
    3756:	cf 01       	movw	r24, r30
    3758:	08 95       	ret

0000375a <__prologue_saves__>:
    375a:	2f 92       	push	r2
    375c:	3f 92       	push	r3
    375e:	4f 92       	push	r4
    3760:	5f 92       	push	r5
    3762:	6f 92       	push	r6
    3764:	7f 92       	push	r7
    3766:	8f 92       	push	r8
    3768:	9f 92       	push	r9
    376a:	af 92       	push	r10
    376c:	bf 92       	push	r11
    376e:	cf 92       	push	r12
    3770:	df 92       	push	r13
    3772:	ef 92       	push	r14
    3774:	ff 92       	push	r15
    3776:	0f 93       	push	r16
    3778:	1f 93       	push	r17
    377a:	cf 93       	push	r28
    377c:	df 93       	push	r29
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    3782:	ca 1b       	sub	r28, r26
    3784:	db 0b       	sbc	r29, r27
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	f8 94       	cli
    378a:	de bf       	out	0x3e, r29	; 62
    378c:	0f be       	out	0x3f, r0	; 63
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	09 94       	ijmp

00003792 <__epilogue_restores__>:
    3792:	2a 88       	ldd	r2, Y+18	; 0x12
    3794:	39 88       	ldd	r3, Y+17	; 0x11
    3796:	48 88       	ldd	r4, Y+16	; 0x10
    3798:	5f 84       	ldd	r5, Y+15	; 0x0f
    379a:	6e 84       	ldd	r6, Y+14	; 0x0e
    379c:	7d 84       	ldd	r7, Y+13	; 0x0d
    379e:	8c 84       	ldd	r8, Y+12	; 0x0c
    37a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    37a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    37a4:	b9 84       	ldd	r11, Y+9	; 0x09
    37a6:	c8 84       	ldd	r12, Y+8	; 0x08
    37a8:	df 80       	ldd	r13, Y+7	; 0x07
    37aa:	ee 80       	ldd	r14, Y+6	; 0x06
    37ac:	fd 80       	ldd	r15, Y+5	; 0x05
    37ae:	0c 81       	ldd	r16, Y+4	; 0x04
    37b0:	1b 81       	ldd	r17, Y+3	; 0x03
    37b2:	aa 81       	ldd	r26, Y+2	; 0x02
    37b4:	b9 81       	ldd	r27, Y+1	; 0x01
    37b6:	ce 0f       	add	r28, r30
    37b8:	d1 1d       	adc	r29, r1
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	ed 01       	movw	r28, r26
    37c6:	08 95       	ret

000037c8 <_exit>:
    37c8:	f8 94       	cli

000037ca <__stop_program>:
    37ca:	ff cf       	rjmp	.-2      	; 0x37ca <__stop_program>
